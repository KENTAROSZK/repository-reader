--- ディレクトリ構造 ---
experimentation
├── temp_lister_test
│   ├── dir_a
│   ├── dir_c
│   ├── File_B.py
│   └── file_z.txt
├── config.py
├── directory_lister.py
├── entrypoint.py
├── entrypoint.txt
├── pyproject.toml
└── settings.yml


--- ファイル内容 ---


/config.py:
--------------------------------------------------------------------------------
 1 | import yaml
 2 | from pydantic import BaseModel
 3 | from typing import List
 4 | from pathlib import Path
 5 | 
 6 | class IgnoreExtensionsConfig(BaseModel):
 7 |     images: List[str] | None
 8 |     videos: List[str] | None
 9 |     compressed: List[str] | None
10 |     binaries: List[str] | None
11 |     documents: List[str] | None
12 |     others: List[str] | None
13 | 
14 |     def all_extensions(self) -> List[str]:
15 |         """全ての拡張子を取得する"""
16 |         all_exts = []
17 |         for attr in self.__dict__.values():
18 |             if isinstance(attr, list):
19 |                 all_exts.extend(attr)
20 |         return all_exts
21 | 
22 | 
23 | 
24 | class Config(BaseModel):
25 |     ignore_dirs: List[str] | None
26 |     ignore_files: List[str] | None
27 |     ignore_extensions: IgnoreExtensionsConfig | None
28 | 
29 | 
30 | def get_config(settings_yaml_path: Path)->Config:
31 |     with open(settings_yaml_path, 'rb') as f:
32 |         yml = yaml.safe_load(f)
33 | 
34 |     return Config.model_validate(yml)
35 | 
36 | 
37 | def main() -> None:
38 |     settings_yaml_path = Path('./settings.yml')
39 |     config = get_config(settings_yaml_path)
40 | 
41 |     print()
42 |     print(f"{getattr(config, 'ignore_dirs')=}")
43 |     print()
44 |     print(f"{getattr(config, 'ignore_extensions')=}")
45 |     print()
46 |     print(f"{getattr(config.ignore_extensions, 'images')=}")
47 |     print()
48 |     print(config.ignore_extensions.all_extensions())
49 |     print()
50 | 
51 | 
52 | if __name__ == "__main__":
53 |     main()
--------------------------------------------------------------------------------


/directory_lister.py:
--------------------------------------------------------------------------------
  1 | from pathlib import Path
  2 | from typing import List
  3 | from config import get_config, Config
  4 | 
  5 | import os
  6 | import sys
  7 | 
  8 | 
  9 | class DirectoryLister:
 10 |     def __init__(
 11 |             self,
 12 |             directory_path: Path,
 13 |             output_file: Path,
 14 |             config: Config
 15 |     ):
 16 |         self.root_path = directory_path.resolve() # 絶対パスに変換
 17 |         self.output_file = output_file
 18 |         self.config = config
 19 | 
 20 |         if not self.root_path.is_dir():
 21 |             raise ValueError(f"{self.root_path} is not a directory.")
 22 | 
 23 |         self.ignore_dirs = getattr(self.config, "ignore_dirs")
 24 |         self.ignore_files = getattr(self.config, "ignore_files")
 25 |         self.ignore_extensions = getattr(self.config.ignore_extensions, "all_extensions")()
 26 |         self.ignore_files.append(str(output_file)) # 過去に出力したテキストを無視する必要がある
 27 | 
 28 | 
 29 |     def _should_ignore(self, path: Path) -> bool:
 30 |         """指定されたパスが無視対象かどうかを判定する"""
 31 |         if any(part in self.ignore_dirs for part in path.parts): return True # ディレクトリ名で無視
 32 |         if path.name in self.ignore_files: return True # ファイル名で無視
 33 |         if path.suffix.lower() in self.ignore_extensions: return True # 拡張子で無視
 34 | 
 35 |         return False
 36 | 
 37 | 
 38 |     def _get_sorted_items(self, directory: Path) -> List[Path]:
 39 |         """指定されたディレクトリ内のアイテムを無視対象を除外してソートする. 内部メソッド"""
 40 |         # TODO: パーミッションエラーやディレクトリを見つけられなかった時のエラーハンドリングを追加する
 41 | 
 42 |         # ディレクトリ内のアイテムを取得し、無視対象を除外してソート
 43 |         filtered_items = [item for item in directory.iterdir() if not self._should_ignore(item)]
 44 |         items = sorted(
 45 |             filtered_items,
 46 |             key=lambda x: (x.is_file(), x.name.lower()) # ディレクトリを先に、次にファイル名でソート
 47 |         )
 48 |         return items
 49 | 
 50 | 
 51 |     def _generate_tree_recursive(
 52 |             self,
 53 |             current_path: Path,
 54 |             prefix: str = "",
 55 |             is_last: bool=True
 56 |     ) -> str:
 57 |         """ディレクトリ構造をtree形式で再帰的に生成する（内部メソッド）"""
 58 |         structure = ""
 59 |         connector = '└── ' if is_last else '├── '
 60 | 
 61 |         try:
 62 |             structure += f"{prefix}{connector}{current_path.name}\n"
 63 | 
 64 |             # ディレクトリの場合は再起的に呼び出す
 65 |             if current_path.is_dir():
 66 |                 new_prefix = prefix + ('    ' if is_last else '│   ')
 67 |                 # サブアイテムを取得する
 68 |                 items = self._get_sorted_items(current_path)
 69 |                 item_count = len(items)
 70 | 
 71 |                 for i, item in enumerate(items):
 72 |                     is_last_item= (i == item_count - 1)
 73 |                     # 再帰的に呼び出す
 74 |                     structure += self._generate_tree_recursive(item, new_prefix, is_last_item)
 75 | 
 76 |         except OSError as e:
 77 |             structure += f"{prefix}{connector}[エラー: {e.strerror} ({current_path.name})]\n"
 78 |         except Exception as e:
 79 |             structure += f"{prefix}{connector}[予期せぬエラー: {e} ({current_path.name})]\n"
 80 | 
 81 |         return structure
 82 | 
 83 | 
 84 |     def generate_tree_structure(self)-> str:
 85 |         """ルートディレクトリから始まる全体のディレクt理構造の文字列を生成する"""
 86 |         structure = f"{self.root_path.name}\n"
 87 |         print(structure)
 88 | 
 89 |         # ルートディレクトリのアイテムを取得
 90 |         items = self._get_sorted_items(self.root_path)
 91 | 
 92 |         # 各アイテムに対して再起的に処理をする
 93 |         num_items = len(items)
 94 |         for i, item in enumerate(items):
 95 |             is_last_item = (i == num_items - 1)
 96 |             structure += self._generate_tree_recursive(item, "", is_last_item) # prefixは空文字列で初期化
 97 | 
 98 |         return structure
 99 | 
100 | 
101 |     def _format_file_content(self, file_path: Path) -> str:
102 |         """単一のファイルのパスと内容を読み込み、整形して文字列で返す。 内部メソッド"""
103 | 
104 |         content_str = "" # 結果の文字列
105 |         separator = "-" * 80 + "\n" # 区切り線の定義
106 | 
107 |         # 相対パスの取得
108 |         relative_path = file_path.relative_to(self.root_path) # 相対パスを取得
109 |         content_str += f"\n\n/{relative_path}:\n" # 相対パスを表示
110 | 
111 |         content_str += separator
112 | 
113 |         # ファイルの内容を読み込む
114 |         try:
115 |             with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
116 |                 lines = f.readlines() # ファイルの全行をリストとして読み込む
117 | 
118 |             if not lines: # 空ファイルの場合
119 |                 content_str += " [空ファイル]\n"
120 |             else:
121 |                 max_digits = len(str(len(lines))) # 行番号の桁数を計算。仮に20行であればmax_digitsは2になる。
122 |                 for i, line in enumerate(lines):
123 |                     line_num_str = str(i+1).rjust(max_digits) # 行番号を右寄せで整形
124 |                     content_str += f"{line_num_str} | {line.rstrip()}\n" # 行末の改行文字（rstrip()）を除去して、整形して追加
125 |         except PermissionError:
126 |             content_str += f" [エラー] ファイル '{file_path.name}' へのアクセス権がありません。\n"
127 |         except OSError as e:
128 |             content_str += f" [エラー] ファイル '{file_path.name}' 読み込み中にOSエラーが発生しました: {e.strerror}\n"
129 |         except Exception as e:
130 |             content_str += f" [エラー] ファイル '{file_path.name}' 読み込み中に予期せぬエラーが発生しました: {e}\n"
131 | 
132 |         content_str += separator # 最後に区切り線を追加
133 |         return content_str
134 | 
135 | 
136 |     def generate_file_contents(self)->str:
137 |         """全ファイルのパスと内容を行番号付きで取得する"""
138 |         contents=""
139 | 
140 |         files = [os.path.join(dirpath, f) for dirpath, _, filenames in os.walk(self.root_path) for f in filenames]
141 |         files = [item for item in files if not self._should_ignore(Path(item))] # 無視対象を除外
142 |         files = sorted(files, key=lambda x: (os.path.isfile(x), x.lower())) # ディレクトリを先に、次にファイル名でソート
143 |         files = [Path(item) for item in files] # Pathオブジェクトに変換
144 | 
145 |         for file in files:
146 |             contents += self._format_file_content(file)
147 | 
148 |         return contents
149 | 
150 | 
151 |     def write_to_file(self, tree_structure: str, file_contents: str) -> None:
152 |         """
153 |         生成したディレクトリ構造とファイル内容を指定されたファイルに書き込む。
154 | 
155 |         Args:
156 |             tree_structure (str): generate_tree_structureで生成された文字列。
157 |             file_contents (str): generate_file_contentsで生成された文字列。
158 |         """
159 |         print(f"ファイル '{self.output_file}' に書き込み中...")
160 |         try:
161 |             # --- 出力ファイルの親ディレクトリが存在しない場合に作成 ---
162 |             # self.output_path.parent は出力ファイルの親ディレクトリのPathオブジェクト
163 |             # parents=True: 中間ディレクトリもまとめて作成 (例: /a/b/c.txt で a, b がなくても作る)
164 |             # exist_ok=True: ディレクトリが既に存在していてもエラーにしない
165 |             self.output_file.parent.mkdir(parents=True, exist_ok=True)
166 | 
167 |             # --- ファイルへの書き込み ---
168 |             # 'w'モード: 書き込みモード。ファイルが存在すれば上書き、なければ新規作成。
169 |             # encoding='utf-8': UTF-8エンコーディングで書き込む。
170 |             with open(self.output_file, 'w', encoding='utf-8') as f:
171 |                 f.write("--- ディレクトリ構造 ---\n")
172 |                 f.write(tree_structure)
173 |                 f.write("\n\n--- ファイル内容 ---\n") # 構造と内容の間に区切りを入れる
174 |                 f.write(file_contents)
175 | 
176 |             # 成功メッセージ (絶対パスで表示すると分かりやすい)
177 |             print(f"ディレクトリリストが '{self.output_file.resolve()}' に出力されました。")
178 | 
179 |         except IOError as e:
180 |             # ファイル書き込みに関するエラー (ディスクフル、アクセス権など)
181 |             print(f"エラー: ファイル '{self.output_file}' に書き込めませんでした: {e}", file=sys.stderr)
182 |         except Exception as e:
183 |             # その他の予期せぬエラー
184 |             print(f"予期せぬエラーが発生しました: {e}", file=sys.stderr)
185 |     def run(self) -> None:
186 |         """
187 |         ディレクトリリスト化の全処理を実行する。
188 |         """
189 |         print(f"処理を開始します: {self.root_path}")
190 |         try:
191 |             # 1. ディレクトリ構造を生成
192 |             tree_structure = self.generate_tree_structure()
193 | 
194 |             # 2. ファイル内容を生成
195 |             file_contents = self.generate_file_contents()
196 | 
197 |             # 3. ファイルに書き込み
198 |             self.write_to_file(tree_structure, file_contents)
199 | 
200 |             print("処理が正常に完了しました。")
201 | 
202 |         except Exception as e:
203 |             # run の中で予期せぬエラーが起きた場合 (各メソッド内で捕捉されなかった場合など)
204 |             print(f"\n処理中にエラーが発生しました: {e}", file=sys.stderr)
205 |             # ここでプログラムを終了させるか、呼び出し元にエラーを伝えるかは設計による
206 |             # 今回は呼び出し元 (mainブロック) で最終的なエラーハンドリングを行う想定
207 |             raise # 捕捉したエラーを再度送出する
208 | 
209 | 
210 | def test_should_ignore(lister: DirectoryLister) -> None:
211 |     # テスト用のPathオブジェクトを作成 (Windows/Mac/Linuxで互換性のある書き方)
212 |     test_path_git = Path(".git") / "config" # 相対パスで作成
213 |     test_path_pycache = Path("my_module") / "__pycache__" / "cache_file.pyc"
214 |     test_path_dsstore = Path("images") / ".DS_Store"
215 |     test_path_log = Path("logs") / "app.log"
216 |     test_path_normal_file = Path("src") / "main.py"
217 |     test_path_normal_dir = Path("data")
218 |     test_path_root_ignored_file = Path(".env")
219 |     test_path_image = Path("assets") / "logo.png"
220 | 
221 |     print("-" * 20)
222 |     print("無視判定テスト:")
223 |     print(f"'{test_path_git}' は無視対象? -> {lister._should_ignore(test_path_git)}") # Trueのはず
224 |     print(f"'{test_path_pycache}' は無視対象? -> {lister._should_ignore(test_path_pycache)}") # Trueのはず
225 |     print(f"'{test_path_dsstore}' は無視対象? -> {lister._should_ignore(test_path_dsstore)}") # Trueのはず
226 |     print(f"'{test_path_log}' は無視対象? -> {lister._should_ignore(test_path_log)}") # Trueのはず
227 |     print(f"'{test_path_normal_file}' は無視対象? -> {lister._should_ignore(test_path_normal_file)}") # Falseのはず
228 |     print(f"'{test_path_normal_dir}' は無視対象? -> {lister._should_ignore(test_path_normal_dir)}") # Falseのはず
229 |     print(f"'{test_path_root_ignored_file}' は無視対象? -> {lister._should_ignore(test_path_root_ignored_file)}") # Trueのはず
230 |     print(f"'{test_path_image}' は無視対象? -> {lister._should_ignore(test_path_image)}") # Trueのはず
231 |     print("-" * 20)
232 | 
233 | 
234 | def test_get_sorted_items() -> None:
235 |     # テスト用のディレクトリとファイルを作成
236 |     test_base_dir = Path("./temp_lister_test")
237 |     test_base_dir.mkdir(exist_ok=True)
238 |     (test_base_dir / "dir_a").mkdir(exist_ok=True)
239 |     (test_base_dir / "file_z.txt").touch(exist_ok=True)
240 |     (test_base_dir / "File_B.py").touch(exist_ok=True)
241 |     (test_base_dir / "dir_c").mkdir(exist_ok=True)
242 |     (test_base_dir / ".env").touch(exist_ok=True) # 無視されるファイル
243 |     (test_base_dir / "image.png").touch(exist_ok=True) # 無視される拡張子
244 |     (test_base_dir / ".git").mkdir(exist_ok=True) # 無視されるディレクトリ
245 | 
246 |     # Listerインスタンスを作成 (テストディレクトリを対象)
247 |     lister = DirectoryLister(
248 |         Path(test_base_dir),
249 |         Path("./output.txt"),
250 |         config=get_config(Path('./settings.yml'))
251 |     )
252 | 
253 |     print(f"\n'{test_base_dir}' 内のソート済みアイテム:")
254 |     sorted_items = lister._get_sorted_items(test_base_dir)
255 |     if not sorted_items:
256 |         print("  (アイテムが見つからないか、アクセスエラー)")
257 |     for item in sorted_items:
258 |         item_type = "Dir " if item.is_dir() else "File"
259 |         print(f"  {item_type}: {item.name}")
260 | 
261 |     # 期待される出力順序の確認 (手動)
262 |     # dir_a, dir_c, File_B.py, file_z.txt の順になるはず
263 | 
264 | 
265 | def main() -> None:
266 |     # インスタンス化
267 |     lister = DirectoryLister(
268 |         directory_path=Path('./'),
269 |         output_file=Path('text.txt'),
270 |         config=get_config(Path('./settings.yml'))
271 |     )
272 | 
273 |     structure = lister.generate_tree_structure()
274 |     print("-"*30)
275 |     print(structure)
276 | 
277 |     # ディレクトリリスト化を実行
278 |     lister.run()
279 | 
280 |     # for item in a:
281 |     #     print(item)
282 | 
283 |     # test_should_ignore(lister)
284 |     # test_get_sorted_items()
285 | 
286 | 
287 | if __name__ == "__main__":
288 |     main()
--------------------------------------------------------------------------------


/entrypoint.py:
--------------------------------------------------------------------------------
  1 | from pathlib import Path
  2 | 
  3 | from config import get_config, Config
  4 | 
  5 | # 無視するディレクトリやファイル、拡張子の設定を取得
  6 | settings_yaml_path = Path('./settings.yml')
  7 | CONFIG = get_config(settings_yaml_path)
  8 | 
  9 | 
 10 | def should_ignore(path: Path, config: Config=CONFIG) -> bool:
 11 |     """指定されたパスが無視対象かどうかを判定する"""
 12 |     # ディレクトリ名で無視
 13 | 
 14 |     if any(part in getattr(config, "ignore_dirs") for part in path.parts):
 15 |         return True
 16 |     # ファイル名で無視
 17 |     if path.name in getattr(config, "ignore_files"):
 18 |         return True
 19 |     # 拡張子で無視
 20 |     if path.suffix.lower() in config.ignore_extensions.all_extensions():
 21 |         return True
 22 |     return False
 23 | 
 24 | 
 25 | def generate_tree(start_path: Path, prefix: str = '', is_last: bool = True) -> str:
 26 |     """ディレクトリ構造をtree形式で生成する再帰関数"""
 27 |     structure = ""
 28 |     # 無視対象のディレクトリ/ファイルは処理しない
 29 |     if should_ignore(start_path):
 30 |         return ""
 31 | 
 32 |     connector = '└── ' if is_last else '├── '
 33 |     structure += f"{prefix}{connector}{start_path.name}\n"
 34 | 
 35 |     if start_path.is_dir():
 36 |         new_prefix = prefix + ('    ' if is_last else '│   ')
 37 |         # ディレクトリ内のアイテムを取得し、無視対象を除外してソート
 38 |         items = sorted(
 39 |             [item for item in start_path.iterdir() if not should_ignore(item)],
 40 |             key=lambda x: (x.is_file(), x.name.lower()) # ディレクトリを先に、次にファイル名でソート
 41 |         )
 42 |         for i, item in enumerate(items):
 43 |             is_last_item = (i == len(items) - 1)
 44 |             structure += generate_tree(item, new_prefix, is_last_item)
 45 | 
 46 |     return structure
 47 | 
 48 | 
 49 | def get_file_contents(root_path: Path) -> str:
 50 |     """指定されたディレクトリ以下の全ファイルのパスと内容を行番号付きで取得する"""
 51 |     contents = ""
 52 |     separator = "-" * 80 + "\n"
 53 |     processed_files_count = 0
 54 | 
 55 |     # rglob で再帰的にファイルを取得し、パスでソート
 56 |     all_paths = sorted([p for p in root_path.rglob('*')])
 57 | 
 58 |     for item in all_paths:
 59 |         # 無視対象をスキップ
 60 |         if should_ignore(item):
 61 |             continue
 62 | 
 63 |         if item.is_file():
 64 |             processed_files_count += 1
 65 |             # ルートパスからの相対パスを取得し、先頭に / を追加
 66 |             try:
 67 |                 relative_path = item.relative_to(root_path)
 68 |                 contents += f"\n/{relative_path}:\n"
 69 |             except ValueError:
 70 |                 # root_path自身がファイルの場合など
 71 |                 contents += f"\n/{item.name}:\n"
 72 | 
 73 |             contents += separator
 74 |             try:
 75 |                 # さまざまなエンコーディングに対応し、エラーは無視
 76 |                 with open(item, 'r', encoding='utf-8', errors='ignore') as f:
 77 |                     lines = f.readlines()
 78 |                     if not lines:
 79 |                         contents += " [空ファイル]\n"
 80 |                     else:
 81 |                         # 行番号の桁数を計算
 82 |                         max_digits = len(str(len(lines)))
 83 |                         for i, line in enumerate(lines):
 84 |                             # 行番号を右寄せでフォーマット
 85 |                             line_num_str = str(i + 1).rjust(max_digits)
 86 |                             # 末尾の改行は維持しつつ、余分な空白は削除
 87 |                             contents += f"{line_num_str} | {line.rstrip()}\n"
 88 |             except Exception as e:
 89 |                 contents += f" [エラー] ファイル読み込み中にエラーが発生しました: {e}\n"
 90 |             contents += separator
 91 | 
 92 |     if processed_files_count == 0:
 93 |         contents += "\n[指定されたディレクトリ内に処理対象ファイルが見つかりませんでした]\n"
 94 | 
 95 |     return contents
 96 | 
 97 | def generate_directory_listing(directory_path: str, output_file: str) -> None:
 98 |     """ディレクトリ構造とファイル内容を指定ファイルに出力する"""
 99 |     start_path = Path(directory_path).resolve() # 絶対パスに変換
100 |     if not start_path.is_dir():
101 |         print(f"エラー: '{directory_path}' は有効なディレクトリではありません。")
102 |         return
103 | 
104 |     print(f"処理を開始します: {start_path}")
105 |     print(f"出力ファイル: {output_file}")
106 | 
107 |     # ディレクトリ構造の取得 (tree形式)
108 |     print("ディレクトリ構造を生成中...")
109 |     # ルートディレクトリ自体も表示するために少し調整
110 |     structure = f"{start_path.name}\n"
111 |     items = sorted(
112 |         [item for item in start_path.iterdir() if not should_ignore(item)],
113 |          key=lambda x: (x.is_file(), x.name.lower())
114 |     )
115 |     for i, item in enumerate(items):
116 |         is_last_item = (i == len(items) - 1)
117 |         structure += generate_tree(item, '', is_last_item)
118 |     print("ディレクトリ構造の生成完了。")
119 | 
120 |     # ファイル内容の取得
121 |     print("ファイル内容を取得中...")
122 |     file_contents_data = get_file_contents(start_path)
123 |     print("ファイル内容の取得完了。")
124 | 
125 |     # ファイルへの書き込み
126 |     print("ファイルに書き込み中...")
127 |     try:
128 |         # 出力ファイルのディレクトリが存在しない場合は作成
129 |         output_path = Path(output_file)
130 |         output_path.parent.mkdir(parents=True, exist_ok=True)
131 | 
132 |         with open(output_path, 'w', encoding='utf-8') as f:
133 |             f.write(structure)
134 |             f.write("\n\n") # treeと内容の間に空行を入れる
135 |             f.write(file_contents_data)
136 |         print(f"ディレクトリリストが '{output_path.resolve()}' に出力されました。")
137 |     except IOError as e:
138 |         print(f"エラー: ファイル '{output_file}' に書き込めませんでした: {e}")
139 |     except Exception as e:
140 |         print(f"予期せぬエラーが発生しました: {e}")
141 | 
142 | 
143 | def main() -> None:
144 |     directory_path = "../"
145 |     start_path = Path(directory_path).resolve() # 絶対パスに変換
146 |     start_path = Path(directory_path).resolve().resolve() # 絶対パスに変換
147 | 
148 |     generate_directory_listing(directory_path, "./entrypoint.txt")
149 | 
150 | 
151 | # --- コマンドライン引数の処理とメイン実行部分 ---
152 | if __name__ == "__main__":
153 |     main()
--------------------------------------------------------------------------------


/entrypoint.txt:
--------------------------------------------------------------------------------
   1 | repository-reader
   2 | ├── context
   3 | │   ├── cpu
   4 | │   │   └── docker-compose.yaml
   5 | │   └── Dockerfile
   6 | ├── experimentation
   7 | │   ├── temp_lister_test
   8 | │   │   ├── dir_a
   9 | │   │   ├── dir_c
  10 | │   │   ├── File_B.py
  11 | │   │   └── file_z.txt
  12 | │   ├── config.py
  13 | │   ├── directory_lister.py
  14 | │   ├── entrypoint.py
  15 | │   ├── entrypoint.txt
  16 | │   ├── pyproject.toml
  17 | │   ├── settings.yml
  18 | │   └── text.txt
  19 | ├── project_module
  20 | │   └── src
  21 | │       └── project_module
  22 | │           └── __init__.py
  23 | ├── .gitignore
  24 | ├── README.md
  25 | └── Taskfile.yaml
  26 | 
  27 | 
  28 | 
  29 | /.gitignore:
  30 | --------------------------------------------------------------------------------
  31 | 1 | # 環境変数
  32 | 2 | .env*
  33 | 3 | env/
  34 | 4 |
  35 | 5 | .local*
  36 | --------------------------------------------------------------------------------
  37 | 
  38 | /README.md:
  39 | --------------------------------------------------------------------------------
  40 | 1 | ## repository reader
  41 | --------------------------------------------------------------------------------
  42 | 
  43 | /Taskfile.yaml:
  44 | --------------------------------------------------------------------------------
  45 |  1 | version: '3'
  46 |  2 |
  47 |  3 | dotenv: ['.env']
  48 |  4 |
  49 |  5 | tasks:
  50 |  6 |   build:
  51 |  7 |     desc: Dockerイメージのビルド
  52 |  8 |     cmds:
  53 |  9 |       - docker compose -f ./context/cpu/docker-compose.yaml build
  54 | 10 |
  55 | 11 |   up:
  56 | 12 |     desc: コンテナを起動
  57 | 13 |     cmds:
  58 | 14 |       - docker compose -f ./context/cpu/docker-compose.yaml up -d
  59 | 15 |
  60 | 16 |   down:
  61 | 17 |     desc: コンテナの停止と削除
  62 | 18 |     cmds:
  63 | 19 |       - docker compose -f ./context/cpu/docker-compose.yaml down
  64 | 20 |
  65 | 21 |   write_uid_onto_env:
  66 | 22 |     desc: ホストマシンのUIDとUSERNAMEを.envに書き込む
  67 | 23 |     cmds:
  68 | 24 |       - |
  69 | 25 |         TEMP_FILE=$(mktemp)
  70 | 26 |         grep -v "^USER_UID=" .env | grep -v "^USERNAME=" > $$TEMP_FILE
  71 | 27 |         echo "USER_UID=$(id -u $(whoami))" >> $$TEMP_FILE
  72 | 28 |         echo "USERNAME=$USER" >> $$TEMP_FILE
  73 | 29 |         mv $$TEMP_FILE .env
  74 | 30 |
  75 | 31 |   shell:
  76 | 32 |     desc: UID書き込み -> build -> up -> コンテナに入る
  77 | 33 |     cmds:
  78 | 34 |       - task: write_uid_onto_env
  79 | 35 |       - task: build
  80 | 36 |       - task: up
  81 | 37 |       - docker exec -it "{{.container_name}}" /bin/bash
  82 | 38 |     vars:
  83 | 39 |       container_name:
  84 | 40 |         sh: 'echo ${CONTAINER_NAME}'
  85 | --------------------------------------------------------------------------------
  86 | 
  87 | /context/Dockerfile:
  88 | --------------------------------------------------------------------------------
  89 |  1 | FROM python:3.11-slim
  90 |  2 |
  91 |  3 | # Build-time arguments
  92 |  4 | ARG POETRY_VERSION
  93 |  5 | ARG POETRY_HOME
  94 |  6 | ARG USER_UID
  95 |  7 | ARG USERNAME
  96 |  8 | ARG PROJECT_NAME
  97 |  9 |
  98 | 10 | # 必要なパッケージをインストール（curl等）
  99 | 11 | RUN apt-get update && apt-get install -y --no-install-recommends \
 100 | 12 |     curl \
 101 | 13 |     && apt-get clean \
 102 | 14 |     && rm -rf /var/lib/apt/lists/*
 103 | 15 |
 104 | 16 | # Poetryのインストール
 105 | 17 | RUN echo ${POETRY_HOME}
 106 | 18 | SHELL ["/bin/bash", "-o", "pipefail", "-c"]
 107 | 19 | RUN curl -sSL https://install.python-poetry.org/ | python3 - --version ${POETRY_VERSION} && \
 108 | 20 |     ln -s ${POETRY_HOME}/bin/poetry /usr/local/bin/poetry
 109 | 21 |
 110 | 22 | # Node.jsとnpmのインストール
 111 | 23 | RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
 112 | 24 | apt-get install -y --no-install-recommends nodejs && \
 113 | 25 | apt-get clean && \
 114 | 26 | rm -rf /var/lib/apt/lists/*
 115 | 27 |
 116 | 28 |
 117 | 29 | # ==========================================
 118 | 30 | # Create user in the container to avoid permission matter
 119 | 31 | # incompatible between host and container user
 120 | 32 | # ==========================================
 121 | 33 | RUN useradd --uid ${USER_UID} -m ${USERNAME}
 122 | 34 |
 123 | 35 | USER $USERNAME
 124 | 36 | ENV PATH="/usr/local/bin:$PATH"
 125 | 37 |
 126 | 38 |
 127 | 39 | WORKDIR /home/${USERNAME}/${PROJECT_NAME}
 128 | --------------------------------------------------------------------------------
 129 | 
 130 | /context/cpu/docker-compose.yaml:
 131 | --------------------------------------------------------------------------------
 132 |  1 | services:
 133 |  2 |   python-dev: # サービス名 (任意)
 134 |  3 |     build:
 135 |  4 |       context: ../../context/
 136 |  5 |       dockerfile: Dockerfile
 137 |  6 |       args:
 138 |  7 |         POETRY_VERSION: ${POETRY_VERSION}
 139 |  8 |         POETRY_HOME: ${POETRY_HOME}
 140 |  9 |         USER_UID: ${USER_UID}
 141 | 10 |         USERNAME: ${USERNAME}
 142 | 11 |         PROJECT_NAME: ${PROJECT_NAME}
 143 | 12 |     container_name: ${CONTAINER_NAME}
 144 | 13 |     volumes:
 145 | 14 |       - type: bind
 146 | 15 |         source: ../../
 147 | 16 |         target: /home/${USERNAME}/${PROJECT_NAME}
 148 | 17 |     working_dir: /home/${USERNAME}/${PROJECT_NAME}
 149 | 18 |     tty: true
 150 | 19 |     restart: always # コンテナが停止した場合に常に再起動する
 151 | --------------------------------------------------------------------------------
 152 | 
 153 | /experimentation/config.py:
 154 | --------------------------------------------------------------------------------
 155 |  1 | import yaml
 156 |  2 | from pydantic import BaseModel
 157 |  3 | from typing import List
 158 |  4 | from pathlib import Path
 159 |  5 |
 160 |  6 | class IgnoreExtensionsConfig(BaseModel):
 161 |  7 |     images: List[str] | None
 162 |  8 |     videos: List[str] | None
 163 |  9 |     compressed: List[str] | None
 164 | 10 |     binaries: List[str] | None
 165 | 11 |     documents: List[str] | None
 166 | 12 |     others: List[str] | None
 167 | 13 |
 168 | 14 |     def all_extensions(self) -> List[str]:
 169 | 15 |         """全ての拡張子を取得する"""
 170 | 16 |         all_exts = []
 171 | 17 |         for attr in self.__dict__.values():
 172 | 18 |             if isinstance(attr, list):
 173 | 19 |                 all_exts.extend(attr)
 174 | 20 |         return all_exts
 175 | 21 |
 176 | 22 |
 177 | 23 |
 178 | 24 | class Config(BaseModel):
 179 | 25 |     ignore_dirs: List[str] | None
 180 | 26 |     ignore_files: List[str] | None
 181 | 27 |     ignore_extensions: IgnoreExtensionsConfig | None
 182 | 28 |
 183 | 29 |
 184 | 30 | def get_config(settings_yaml_path: Path)->Config:
 185 | 31 |     with open(settings_yaml_path, 'rb') as f:
 186 | 32 |         yml = yaml.safe_load(f)
 187 | 33 |
 188 | 34 |     return Config.model_validate(yml)
 189 | 35 |
 190 | 36 |
 191 | 37 | def main() -> None:
 192 | 38 |     settings_yaml_path = Path('./settings.yml')
 193 | 39 |     config = get_config(settings_yaml_path)
 194 | 40 |
 195 | 41 |     print()
 196 | 42 |     print(f"{getattr(config, 'ignore_dirs')=}")
 197 | 43 |     print()
 198 | 44 |     print(f"{getattr(config, 'ignore_extensions')=}")
 199 | 45 |     print()
 200 | 46 |     print(f"{getattr(config.ignore_extensions, 'images')=}")
 201 | 47 |     print()
 202 | 48 |     print(config.ignore_extensions.all_extensions())
 203 | 49 |     print()
 204 | 50 |
 205 | 51 |
 206 | 52 | if __name__ == "__main__":
 207 | 53 |     main()
 208 | --------------------------------------------------------------------------------
 209 | 
 210 | /experimentation/directory_lister.py:
 211 | --------------------------------------------------------------------------------
 212 |   1 | from pathlib import Path
 213 |   2 | from typing import List
 214 |   3 | from config import get_config, Config
 215 |   4 |
 216 |   5 | import os
 217 |   6 | import sys
 218 |   7 |
 219 |   8 |
 220 |   9 | class DirectoryLister:
 221 |  10 |     def __init__(
 222 |  11 |             self,
 223 |  12 |             directory_path: Path,
 224 |  13 |             output_file: Path,
 225 |  14 |             config: Config
 226 |  15 |     ):
 227 |  16 |         self.root_path = directory_path.resolve() # 絶対パスに変換
 228 |  17 |         self.output_file = output_file
 229 |  18 |         self.config = config
 230 |  19 |
 231 |  20 |         if not self.root_path.is_dir():
 232 |  21 |             raise ValueError(f"{self.root_path} is not a directory.")
 233 |  22 |
 234 |  23 |         self.ignore_dirs = getattr(self.config, "ignore_dirs")
 235 |  24 |         self.ignore_files = getattr(self.config, "ignore_files")
 236 |  25 |         self.ignore_extensions = getattr(self.config.ignore_extensions, "all_extensions")()
 237 |  26 |         self.ignore_files.append(str(output_file)) # 過去に出力したテキストを無視する必要がある
 238 |  27 |
 239 |  28 |
 240 |  29 |     def _should_ignore(self, path: Path) -> bool:
 241 |  30 |         """指定されたパスが無視対象かどうかを判定する"""
 242 |  31 |         if any(part in self.ignore_dirs for part in path.parts): return True # ディレクトリ名で無視
 243 |  32 |         if path.name in self.ignore_files: return True # ファイル名で無視
 244 |  33 |         if path.suffix.lower() in self.ignore_extensions: return True # 拡張子で無視
 245 |  34 |
 246 |  35 |         return False
 247 |  36 |
 248 |  37 |
 249 |  38 |     def _get_sorted_items(self, directory: Path) -> List[Path]:
 250 |  39 |         """指定されたディレクトリ内のアイテムを無視対象を除外してソートする. 内部メソッド"""
 251 |  40 |         # TODO: パーミッションエラーやディレクトリを見つけられなかった時のエラーハンドリングを追加する
 252 |  41 |
 253 |  42 |         # ディレクトリ内のアイテムを取得し、無視対象を除外してソート
 254 |  43 |         filtered_items = [item for item in directory.iterdir() if not self._should_ignore(item)]
 255 |  44 |         items = sorted(
 256 |  45 |             filtered_items,
 257 |  46 |             key=lambda x: (x.is_file(), x.name.lower()) # ディレクトリを先に、次にファイル名でソート
 258 |  47 |         )
 259 |  48 |         return items
 260 |  49 |
 261 |  50 |
 262 |  51 |     def _generate_tree_recursive(
 263 |  52 |             self,
 264 |  53 |             current_path: Path,
 265 |  54 |             prefix: str = "",
 266 |  55 |             is_last: bool=True
 267 |  56 |     ) -> str:
 268 |  57 |         """ディレクトリ構造をtree形式で再帰的に生成する（内部メソッド）"""
 269 |  58 |         structure = ""
 270 |  59 |         connector = '└── ' if is_last else '├── '
 271 |  60 |
 272 |  61 |         try:
 273 |  62 |             structure += f"{prefix}{connector}{current_path.name}\n"
 274 |  63 |
 275 |  64 |             # ディレクトリの場合は再起的に呼び出す
 276 |  65 |             if current_path.is_dir():
 277 |  66 |                 new_prefix = prefix + ('    ' if is_last else '│   ')
 278 |  67 |                 # サブアイテムを取得する
 279 |  68 |                 items = self._get_sorted_items(current_path)
 280 |  69 |                 item_count = len(items)
 281 |  70 |
 282 |  71 |                 for i, item in enumerate(items):
 283 |  72 |                     is_last_item= (i == item_count - 1)
 284 |  73 |                     # 再帰的に呼び出す
 285 |  74 |                     structure += self._generate_tree_recursive(item, new_prefix, is_last_item)
 286 |  75 |
 287 |  76 |         except OSError as e:
 288 |  77 |             structure += f"{prefix}{connector}[エラー: {e.strerror} ({current_path.name})]\n"
 289 |  78 |         except Exception as e:
 290 |  79 |             structure += f"{prefix}{connector}[予期せぬエラー: {e} ({current_path.name})]\n"
 291 |  80 |
 292 |  81 |         return structure
 293 |  82 |
 294 |  83 |
 295 |  84 |     def generate_tree_structure(self)-> str:
 296 |  85 |         """ルートディレクトリから始まる全体のディレクt理構造の文字列を生成する"""
 297 |  86 |         structure = f"{self.root_path.name}¥n"
 298 |  87 |
 299 |  88 |         # ルートディレクトリのアイテムを取得
 300 |  89 |         items = self._get_sorted_items(self.root_path)
 301 |  90 |
 302 |  91 |         # 各アイテムに対して再起的に処理をする
 303 |  92 |         num_items = len(items)
 304 |  93 |         for i, item in enumerate(items):
 305 |  94 |             is_last_item = (i == num_items - 1)
 306 |  95 |             structure += self._generate_tree_recursive(item, "", is_last_item) # prefixは空文字列で初期化
 307 |  96 |
 308 |  97 |         return structure
 309 |  98 |
 310 |  99 |
 311 | 100 |     def _format_file_content(self, file_path: Path) -> str:
 312 | 101 |         """単一のファイルのパスと内容を読み込み、整形して文字列で返す。 内部メソッド"""
 313 | 102 |
 314 | 103 |         content_str = "" # 結果の文字列
 315 | 104 |         separator = "-" * 80 + "\n" # 区切り線の定義
 316 | 105 |
 317 | 106 |         # 相対パスの取得
 318 | 107 |         relative_path = file_path.relative_to(self.root_path) # 相対パスを取得
 319 | 108 |         content_str += f"\n\n/{relative_path}:\n" # 相対パスを表示
 320 | 109 |
 321 | 110 |         content_str += separator
 322 | 111 |
 323 | 112 |         # ファイルの内容を読み込む
 324 | 113 |         try:
 325 | 114 |             with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
 326 | 115 |                 lines = f.readlines() # ファイルの全行をリストとして読み込む
 327 | 116 |
 328 | 117 |             if not lines: # 空ファイルの場合
 329 | 118 |                 content_str += " [空ファイル]\n"
 330 | 119 |             else:
 331 | 120 |                 max_digits = len(str(len(lines))) # 行番号の桁数を計算。仮に20行であればmax_digitsは2になる。
 332 | 121 |                 for i, line in enumerate(lines):
 333 | 122 |                     line_num_str = str(i+1).rjust(max_digits) # 行番号を右寄せで整形
 334 | 123 |                     content_str += f"{line_num_str} | {line.rstrip()}\n" # 行末の改行文字（rstrip()）を除去して、整形して追加
 335 | 124 |         except PermissionError:
 336 | 125 |             content_str += f" [エラー] ファイル '{file_path.name}' へのアクセス権がありません。\n"
 337 | 126 |         except OSError as e:
 338 | 127 |             content_str += f" [エラー] ファイル '{file_path.name}' 読み込み中にOSエラーが発生しました: {e.strerror}\n"
 339 | 128 |         except Exception as e:
 340 | 129 |             content_str += f" [エラー] ファイル '{file_path.name}' 読み込み中に予期せぬエラーが発生しました: {e}\n"
 341 | 130 |
 342 | 131 |         content_str += separator # 最後に区切り線を追加
 343 | 132 |         return content_str
 344 | 133 |
 345 | 134 |
 346 | 135 |     def generate_file_contents(self)->str:
 347 | 136 |         """全ファイルのパスと内容を行番号付きで取得する"""
 348 | 137 |         contents=""
 349 | 138 |
 350 | 139 |         files = [os.path.join(dirpath, f) for dirpath, _, filenames in os.walk(self.root_path) for f in filenames]
 351 | 140 |         files = [item for item in files if not self._should_ignore(Path(item))] # 無視対象を除外
 352 | 141 |         files = sorted(files, key=lambda x: (os.path.isfile(x), x.lower())) # ディレクトリを先に、次にファイル名でソート
 353 | 142 |         files = [Path(item) for item in files] # Pathオブジェクトに変換
 354 | 143 |
 355 | 144 |         for file in files:
 356 | 145 |             contents += self._format_file_content(file)
 357 | 146 |
 358 | 147 |         return contents
 359 | 148 |
 360 | 149 |
 361 | 150 |     def write_to_file(self, tree_structure: str, file_contents: str) -> None:
 362 | 151 |         """
 363 | 152 |         生成したディレクトリ構造とファイル内容を指定されたファイルに書き込む。
 364 | 153 |
 365 | 154 |         Args:
 366 | 155 |             tree_structure (str): generate_tree_structureで生成された文字列。
 367 | 156 |             file_contents (str): generate_file_contentsで生成された文字列。
 368 | 157 |         """
 369 | 158 |         print(f"ファイル '{self.output_file}' に書き込み中...")
 370 | 159 |         try:
 371 | 160 |             # --- 出力ファイルの親ディレクトリが存在しない場合に作成 ---
 372 | 161 |             # self.output_path.parent は出力ファイルの親ディレクトリのPathオブジェクト
 373 | 162 |             # parents=True: 中間ディレクトリもまとめて作成 (例: /a/b/c.txt で a, b がなくても作る)
 374 | 163 |             # exist_ok=True: ディレクトリが既に存在していてもエラーにしない
 375 | 164 |             self.output_file.parent.mkdir(parents=True, exist_ok=True)
 376 | 165 |
 377 | 166 |             # --- ファイルへの書き込み ---
 378 | 167 |             # 'w'モード: 書き込みモード。ファイルが存在すれば上書き、なければ新規作成。
 379 | 168 |             # encoding='utf-8': UTF-8エンコーディングで書き込む。
 380 | 169 |             with open(self.output_file, 'w', encoding='utf-8') as f:
 381 | 170 |                 f.write("--- ディレクトリ構造 ---\n")
 382 | 171 |                 f.write(tree_structure)
 383 | 172 |                 f.write("\n\n--- ファイル内容 ---\n") # 構造と内容の間に区切りを入れる
 384 | 173 |                 f.write(file_contents)
 385 | 174 |
 386 | 175 |             # 成功メッセージ (絶対パスで表示すると分かりやすい)
 387 | 176 |             print(f"ディレクトリリストが '{self.output_file.resolve()}' に出力されました。")
 388 | 177 |
 389 | 178 |         except IOError as e:
 390 | 179 |             # ファイル書き込みに関するエラー (ディスクフル、アクセス権など)
 391 | 180 |             print(f"エラー: ファイル '{self.output_file}' に書き込めませんでした: {e}", file=sys.stderr)
 392 | 181 |         except Exception as e:
 393 | 182 |             # その他の予期せぬエラー
 394 | 183 |             print(f"予期せぬエラーが発生しました: {e}", file=sys.stderr)
 395 | 184 |     def run(self) -> None:
 396 | 185 |         """
 397 | 186 |         ディレクトリリスト化の全処理を実行する。
 398 | 187 |         """
 399 | 188 |         print(f"処理を開始します: {self.root_path}")
 400 | 189 |         try:
 401 | 190 |             # 1. ディレクトリ構造を生成
 402 | 191 |             tree_structure = self.generate_tree_structure()
 403 | 192 |
 404 | 193 |             # 2. ファイル内容を生成
 405 | 194 |             file_contents = self.generate_file_contents()
 406 | 195 |
 407 | 196 |             # 3. ファイルに書き込み
 408 | 197 |             self.write_to_file(tree_structure, file_contents)
 409 | 198 |
 410 | 199 |             print("処理が正常に完了しました。")
 411 | 200 |
 412 | 201 |         except Exception as e:
 413 | 202 |             # run の中で予期せぬエラーが起きた場合 (各メソッド内で捕捉されなかった場合など)
 414 | 203 |             print(f"\n処理中にエラーが発生しました: {e}", file=sys.stderr)
 415 | 204 |             # ここでプログラムを終了させるか、呼び出し元にエラーを伝えるかは設計による
 416 | 205 |             # 今回は呼び出し元 (mainブロック) で最終的なエラーハンドリングを行う想定
 417 | 206 |             raise # 捕捉したエラーを再度送出する
 418 | 207 |
 419 | 208 |
 420 | 209 | def test_should_ignore(lister: DirectoryLister) -> None:
 421 | 210 |     # テスト用のPathオブジェクトを作成 (Windows/Mac/Linuxで互換性のある書き方)
 422 | 211 |     test_path_git = Path(".git") / "config" # 相対パスで作成
 423 | 212 |     test_path_pycache = Path("my_module") / "__pycache__" / "cache_file.pyc"
 424 | 213 |     test_path_dsstore = Path("images") / ".DS_Store"
 425 | 214 |     test_path_log = Path("logs") / "app.log"
 426 | 215 |     test_path_normal_file = Path("src") / "main.py"
 427 | 216 |     test_path_normal_dir = Path("data")
 428 | 217 |     test_path_root_ignored_file = Path(".env")
 429 | 218 |     test_path_image = Path("assets") / "logo.png"
 430 | 219 |
 431 | 220 |     print("-" * 20)
 432 | 221 |     print("無視判定テスト:")
 433 | 222 |     print(f"'{test_path_git}' は無視対象? -> {lister._should_ignore(test_path_git)}") # Trueのはず
 434 | 223 |     print(f"'{test_path_pycache}' は無視対象? -> {lister._should_ignore(test_path_pycache)}") # Trueのはず
 435 | 224 |     print(f"'{test_path_dsstore}' は無視対象? -> {lister._should_ignore(test_path_dsstore)}") # Trueのはず
 436 | 225 |     print(f"'{test_path_log}' は無視対象? -> {lister._should_ignore(test_path_log)}") # Trueのはず
 437 | 226 |     print(f"'{test_path_normal_file}' は無視対象? -> {lister._should_ignore(test_path_normal_file)}") # Falseのはず
 438 | 227 |     print(f"'{test_path_normal_dir}' は無視対象? -> {lister._should_ignore(test_path_normal_dir)}") # Falseのはず
 439 | 228 |     print(f"'{test_path_root_ignored_file}' は無視対象? -> {lister._should_ignore(test_path_root_ignored_file)}") # Trueのはず
 440 | 229 |     print(f"'{test_path_image}' は無視対象? -> {lister._should_ignore(test_path_image)}") # Trueのはず
 441 | 230 |     print("-" * 20)
 442 | 231 |
 443 | 232 |
 444 | 233 | def test_get_sorted_items() -> None:
 445 | 234 |     # テスト用のディレクトリとファイルを作成
 446 | 235 |     test_base_dir = Path("./temp_lister_test")
 447 | 236 |     test_base_dir.mkdir(exist_ok=True)
 448 | 237 |     (test_base_dir / "dir_a").mkdir(exist_ok=True)
 449 | 238 |     (test_base_dir / "file_z.txt").touch(exist_ok=True)
 450 | 239 |     (test_base_dir / "File_B.py").touch(exist_ok=True)
 451 | 240 |     (test_base_dir / "dir_c").mkdir(exist_ok=True)
 452 | 241 |     (test_base_dir / ".env").touch(exist_ok=True) # 無視されるファイル
 453 | 242 |     (test_base_dir / "image.png").touch(exist_ok=True) # 無視される拡張子
 454 | 243 |     (test_base_dir / ".git").mkdir(exist_ok=True) # 無視されるディレクトリ
 455 | 244 |
 456 | 245 |     # Listerインスタンスを作成 (テストディレクトリを対象)
 457 | 246 |     lister = DirectoryLister(
 458 | 247 |         Path(test_base_dir),
 459 | 248 |         Path("./output.txt"),
 460 | 249 |         config=get_config(Path('./settings.yml'))
 461 | 250 |     )
 462 | 251 |
 463 | 252 |     print(f"\n'{test_base_dir}' 内のソート済みアイテム:")
 464 | 253 |     sorted_items = lister._get_sorted_items(test_base_dir)
 465 | 254 |     if not sorted_items:
 466 | 255 |         print("  (アイテムが見つからないか、アクセスエラー)")
 467 | 256 |     for item in sorted_items:
 468 | 257 |         item_type = "Dir " if item.is_dir() else "File"
 469 | 258 |         print(f"  {item_type}: {item.name}")
 470 | 259 |
 471 | 260 |     # 期待される出力順序の確認 (手動)
 472 | 261 |     # dir_a, dir_c, File_B.py, file_z.txt の順になるはず
 473 | 262 |
 474 | 263 |
 475 | 264 | def main() -> None:
 476 | 265 |     # インスタンス化
 477 | 266 |     lister = DirectoryLister(
 478 | 267 |         directory_path=Path('./'),
 479 | 268 |         output_file=Path('text.txt'),
 480 | 269 |         config=get_config(Path('./settings.yml'))
 481 | 270 |     )
 482 | 271 |
 483 | 272 |     structure = lister.generate_tree_structure()
 484 | 273 |     print("-"*30)
 485 | 274 |     print(structure)
 486 | 275 |
 487 | 276 |     # ディレクトリリスト化を実行
 488 | 277 |     lister.run()
 489 | 278 |
 490 | 279 |     # for item in a:
 491 | 280 |     #     print(item)
 492 | 281 |
 493 | 282 |     # test_should_ignore(lister)
 494 | 283 |     # test_get_sorted_items()
 495 | 284 |
 496 | 285 |
 497 | 286 | if __name__ == "__main__":
 498 | 287 |     main()
 499 | --------------------------------------------------------------------------------
 500 | 
 501 | /experimentation/entrypoint.py:
 502 | --------------------------------------------------------------------------------
 503 |   1 | from pathlib import Path
 504 |   2 |
 505 |   3 | from config import get_config, Config
 506 |   4 |
 507 |   5 | # 無視するディレクトリやファイル、拡張子の設定を取得
 508 |   6 | settings_yaml_path = Path('./settings.yml')
 509 |   7 | CONFIG = get_config(settings_yaml_path)
 510 |   8 |
 511 |   9 |
 512 |  10 | def should_ignore(path: Path, config: Config=CONFIG) -> bool:
 513 |  11 |     """指定されたパスが無視対象かどうかを判定する"""
 514 |  12 |     # ディレクトリ名で無視
 515 |  13 |
 516 |  14 |     if any(part in getattr(config, "ignore_dirs") for part in path.parts):
 517 |  15 |         return True
 518 |  16 |     # ファイル名で無視
 519 |  17 |     if path.name in getattr(config, "ignore_files"):
 520 |  18 |         return True
 521 |  19 |     # 拡張子で無視
 522 |  20 |     if path.suffix.lower() in config.ignore_extensions.all_extensions():
 523 |  21 |         return True
 524 |  22 |     return False
 525 |  23 |
 526 |  24 |
 527 |  25 | def generate_tree(start_path: Path, prefix: str = '', is_last: bool = True) -> str:
 528 |  26 |     """ディレクトリ構造をtree形式で生成する再帰関数"""
 529 |  27 |     structure = ""
 530 |  28 |     # 無視対象のディレクトリ/ファイルは処理しない
 531 |  29 |     if should_ignore(start_path):
 532 |  30 |         return ""
 533 |  31 |
 534 |  32 |     connector = '└── ' if is_last else '├── '
 535 |  33 |     structure += f"{prefix}{connector}{start_path.name}\n"
 536 |  34 |
 537 |  35 |     if start_path.is_dir():
 538 |  36 |         new_prefix = prefix + ('    ' if is_last else '│   ')
 539 |  37 |         # ディレクトリ内のアイテムを取得し、無視対象を除外してソート
 540 |  38 |         items = sorted(
 541 |  39 |             [item for item in start_path.iterdir() if not should_ignore(item)],
 542 |  40 |             key=lambda x: (x.is_file(), x.name.lower()) # ディレクトリを先に、次にファイル名でソート
 543 |  41 |         )
 544 |  42 |         for i, item in enumerate(items):
 545 |  43 |             is_last_item = (i == len(items) - 1)
 546 |  44 |             structure += generate_tree(item, new_prefix, is_last_item)
 547 |  45 |
 548 |  46 |     return structure
 549 |  47 |
 550 |  48 |
 551 |  49 | def get_file_contents(root_path: Path) -> str:
 552 |  50 |     """指定されたディレクトリ以下の全ファイルのパスと内容を行番号付きで取得する"""
 553 |  51 |     contents = ""
 554 |  52 |     separator = "-" * 80 + "\n"
 555 |  53 |     processed_files_count = 0
 556 |  54 |
 557 |  55 |     # rglob で再帰的にファイルを取得し、パスでソート
 558 |  56 |     all_paths = sorted([p for p in root_path.rglob('*')])
 559 |  57 |
 560 |  58 |     for item in all_paths:
 561 |  59 |         # 無視対象をスキップ
 562 |  60 |         if should_ignore(item):
 563 |  61 |             continue
 564 |  62 |
 565 |  63 |         if item.is_file():
 566 |  64 |             processed_files_count += 1
 567 |  65 |             # ルートパスからの相対パスを取得し、先頭に / を追加
 568 |  66 |             try:
 569 |  67 |                 relative_path = item.relative_to(root_path)
 570 |  68 |                 contents += f"\n/{relative_path}:\n"
 571 |  69 |             except ValueError:
 572 |  70 |                 # root_path自身がファイルの場合など
 573 |  71 |                 contents += f"\n/{item.name}:\n"
 574 |  72 |
 575 |  73 |             contents += separator
 576 |  74 |             try:
 577 |  75 |                 # さまざまなエンコーディングに対応し、エラーは無視
 578 |  76 |                 with open(item, 'r', encoding='utf-8', errors='ignore') as f:
 579 |  77 |                     lines = f.readlines()
 580 |  78 |                     if not lines:
 581 |  79 |                         contents += " [空ファイル]\n"
 582 |  80 |                     else:
 583 |  81 |                         # 行番号の桁数を計算
 584 |  82 |                         max_digits = len(str(len(lines)))
 585 |  83 |                         for i, line in enumerate(lines):
 586 |  84 |                             # 行番号を右寄せでフォーマット
 587 |  85 |                             line_num_str = str(i + 1).rjust(max_digits)
 588 |  86 |                             # 末尾の改行は維持しつつ、余分な空白は削除
 589 |  87 |                             contents += f"{line_num_str} | {line.rstrip()}\n"
 590 |  88 |             except Exception as e:
 591 |  89 |                 contents += f" [エラー] ファイル読み込み中にエラーが発生しました: {e}\n"
 592 |  90 |             contents += separator
 593 |  91 |
 594 |  92 |     if processed_files_count == 0:
 595 |  93 |         contents += "\n[指定されたディレクトリ内に処理対象ファイルが見つかりませんでした]\n"
 596 |  94 |
 597 |  95 |     return contents
 598 |  96 |
 599 |  97 | def generate_directory_listing(directory_path: str, output_file: str) -> None:
 600 |  98 |     """ディレクトリ構造とファイル内容を指定ファイルに出力する"""
 601 |  99 |     start_path = Path(directory_path).resolve() # 絶対パスに変換
 602 | 100 |     if not start_path.is_dir():
 603 | 101 |         print(f"エラー: '{directory_path}' は有効なディレクトリではありません。")
 604 | 102 |         return
 605 | 103 |
 606 | 104 |     print(f"処理を開始します: {start_path}")
 607 | 105 |     print(f"出力ファイル: {output_file}")
 608 | 106 |
 609 | 107 |     # ディレクトリ構造の取得 (tree形式)
 610 | 108 |     print("ディレクトリ構造を生成中...")
 611 | 109 |     # ルートディレクトリ自体も表示するために少し調整
 612 | 110 |     structure = f"{start_path.name}\n"
 613 | 111 |     items = sorted(
 614 | 112 |         [item for item in start_path.iterdir() if not should_ignore(item)],
 615 | 113 |          key=lambda x: (x.is_file(), x.name.lower())
 616 | 114 |     )
 617 | 115 |     for i, item in enumerate(items):
 618 | 116 |         is_last_item = (i == len(items) - 1)
 619 | 117 |         structure += generate_tree(item, '', is_last_item)
 620 | 118 |     print("ディレクトリ構造の生成完了。")
 621 | 119 |
 622 | 120 |     # ファイル内容の取得
 623 | 121 |     print("ファイル内容を取得中...")
 624 | 122 |     file_contents_data = get_file_contents(start_path)
 625 | 123 |     print("ファイル内容の取得完了。")
 626 | 124 |
 627 | 125 |     # ファイルへの書き込み
 628 | 126 |     print("ファイルに書き込み中...")
 629 | 127 |     try:
 630 | 128 |         # 出力ファイルのディレクトリが存在しない場合は作成
 631 | 129 |         output_path = Path(output_file)
 632 | 130 |         output_path.parent.mkdir(parents=True, exist_ok=True)
 633 | 131 |
 634 | 132 |         with open(output_path, 'w', encoding='utf-8') as f:
 635 | 133 |             f.write(structure)
 636 | 134 |             f.write("\n\n") # treeと内容の間に空行を入れる
 637 | 135 |             f.write(file_contents_data)
 638 | 136 |         print(f"ディレクトリリストが '{output_path.resolve()}' に出力されました。")
 639 | 137 |     except IOError as e:
 640 | 138 |         print(f"エラー: ファイル '{output_file}' に書き込めませんでした: {e}")
 641 | 139 |     except Exception as e:
 642 | 140 |         print(f"予期せぬエラーが発生しました: {e}")
 643 | 141 |
 644 | 142 |
 645 | 143 | def main() -> None:
 646 | 144 |     directory_path = "../"
 647 | 145 |     start_path = Path(directory_path).resolve() # 絶対パスに変換
 648 | 146 |     start_path = Path(directory_path).resolve().resolve() # 絶対パスに変換
 649 | 147 |
 650 | 148 |     generate_directory_listing(directory_path, "./entrypoint.txt")
 651 | 149 |
 652 | 150 |
 653 | 151 | # --- コマンドライン引数の処理とメイン実行部分 ---
 654 | 152 | if __name__ == "__main__":
 655 | 153 |     main()
 656 | --------------------------------------------------------------------------------
 657 | 
 658 | /experimentation/entrypoint.txt:
 659 | --------------------------------------------------------------------------------
 660 |    1 | repository-reader
 661 |    2 | ├── context
 662 |    3 | │   ├── cpu
 663 |    4 | │   │   └── docker-compose.yaml
 664 |    5 | │   └── Dockerfile
 665 |    6 | ├── experimentation
 666 |    7 | │   ├── temp_lister_test
 667 |    8 | │   │   ├── dir_a
 668 |    9 | │   │   ├── dir_c
 669 |   10 | │   │   ├── File_B.py
 670 |   11 | │   │   └── file_z.txt
 671 |   12 | │   ├── config.py
 672 |   13 | │   ├── directory_lister.py
 673 |   14 | │   ├── entrypoint.py
 674 |   15 | │   ├── pyproject.toml
 675 |   16 | │   ├── settings.yml
 676 |   17 | │   └── text.txt
 677 |   18 | ├── project_module
 678 |   19 | │   └── src
 679 |   20 | │       └── project_module
 680 |   21 | │           └── __init__.py
 681 |   22 | ├── .gitignore
 682 |   23 | ├── README.md
 683 |   24 | └── Taskfile.yaml
 684 |   25 |
 685 |   26 |
 686 |   27 |
 687 |   28 | /.gitignore:
 688 |   29 | --------------------------------------------------------------------------------
 689 |   30 | 1 | # 環境変数
 690 |   31 | 2 | .env*
 691 |   32 | 3 | env/
 692 |   33 | 4 |
 693 |   34 | 5 | .local*
 694 |   35 | --------------------------------------------------------------------------------
 695 |   36 |
 696 |   37 | /README.md:
 697 |   38 | --------------------------------------------------------------------------------
 698 |   39 | 1 | ## repository reader
 699 |   40 | --------------------------------------------------------------------------------
 700 |   41 |
 701 |   42 | /Taskfile.yaml:
 702 |   43 | --------------------------------------------------------------------------------
 703 |   44 |  1 | version: '3'
 704 |   45 |  2 |
 705 |   46 |  3 | dotenv: ['.env']
 706 |   47 |  4 |
 707 |   48 |  5 | tasks:
 708 |   49 |  6 |   build:
 709 |   50 |  7 |     desc: Dockerイメージのビルド
 710 |   51 |  8 |     cmds:
 711 |   52 |  9 |       - docker compose -f ./context/cpu/docker-compose.yaml build
 712 |   53 | 10 |
 713 |   54 | 11 |   up:
 714 |   55 | 12 |     desc: コンテナを起動
 715 |   56 | 13 |     cmds:
 716 |   57 | 14 |       - docker compose -f ./context/cpu/docker-compose.yaml up -d
 717 |   58 | 15 |
 718 |   59 | 16 |   down:
 719 |   60 | 17 |     desc: コンテナの停止と削除
 720 |   61 | 18 |     cmds:
 721 |   62 | 19 |       - docker compose -f ./context/cpu/docker-compose.yaml down
 722 |   63 | 20 |
 723 |   64 | 21 |   write_uid_onto_env:
 724 |   65 | 22 |     desc: ホストマシンのUIDとUSERNAMEを.envに書き込む
 725 |   66 | 23 |     cmds:
 726 |   67 | 24 |       - |
 727 |   68 | 25 |         TEMP_FILE=$(mktemp)
 728 |   69 | 26 |         grep -v "^USER_UID=" .env | grep -v "^USERNAME=" > $$TEMP_FILE
 729 |   70 | 27 |         echo "USER_UID=$(id -u $(whoami))" >> $$TEMP_FILE
 730 |   71 | 28 |         echo "USERNAME=$USER" >> $$TEMP_FILE
 731 |   72 | 29 |         mv $$TEMP_FILE .env
 732 |   73 | 30 |
 733 |   74 | 31 |   shell:
 734 |   75 | 32 |     desc: UID書き込み -> build -> up -> コンテナに入る
 735 |   76 | 33 |     cmds:
 736 |   77 | 34 |       - task: write_uid_onto_env
 737 |   78 | 35 |       - task: build
 738 |   79 | 36 |       - task: up
 739 |   80 | 37 |       - docker exec -it "{{.container_name}}" /bin/bash
 740 |   81 | 38 |     vars:
 741 |   82 | 39 |       container_name:
 742 |   83 | 40 |         sh: 'echo ${CONTAINER_NAME}'
 743 |   84 | --------------------------------------------------------------------------------
 744 |   85 |
 745 |   86 | /context/Dockerfile:
 746 |   87 | --------------------------------------------------------------------------------
 747 |   88 |  1 | FROM python:3.11-slim
 748 |   89 |  2 |
 749 |   90 |  3 | # Build-time arguments
 750 |   91 |  4 | ARG POETRY_VERSION
 751 |   92 |  5 | ARG POETRY_HOME
 752 |   93 |  6 | ARG USER_UID
 753 |   94 |  7 | ARG USERNAME
 754 |   95 |  8 | ARG PROJECT_NAME
 755 |   96 |  9 |
 756 |   97 | 10 | # 必要なパッケージをインストール（curl等）
 757 |   98 | 11 | RUN apt-get update && apt-get install -y --no-install-recommends \
 758 |   99 | 12 |     curl \
 759 |  100 | 13 |     && apt-get clean \
 760 |  101 | 14 |     && rm -rf /var/lib/apt/lists/*
 761 |  102 | 15 |
 762 |  103 | 16 | # Poetryのインストール
 763 |  104 | 17 | RUN echo ${POETRY_HOME}
 764 |  105 | 18 | SHELL ["/bin/bash", "-o", "pipefail", "-c"]
 765 |  106 | 19 | RUN curl -sSL https://install.python-poetry.org/ | python3 - --version ${POETRY_VERSION} && \
 766 |  107 | 20 |     ln -s ${POETRY_HOME}/bin/poetry /usr/local/bin/poetry
 767 |  108 | 21 |
 768 |  109 | 22 | # Node.jsとnpmのインストール
 769 |  110 | 23 | RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
 770 |  111 | 24 | apt-get install -y --no-install-recommends nodejs && \
 771 |  112 | 25 | apt-get clean && \
 772 |  113 | 26 | rm -rf /var/lib/apt/lists/*
 773 |  114 | 27 |
 774 |  115 | 28 |
 775 |  116 | 29 | # ==========================================
 776 |  117 | 30 | # Create user in the container to avoid permission matter
 777 |  118 | 31 | # incompatible between host and container user
 778 |  119 | 32 | # ==========================================
 779 |  120 | 33 | RUN useradd --uid ${USER_UID} -m ${USERNAME}
 780 |  121 | 34 |
 781 |  122 | 35 | USER $USERNAME
 782 |  123 | 36 | ENV PATH="/usr/local/bin:$PATH"
 783 |  124 | 37 |
 784 |  125 | 38 |
 785 |  126 | 39 | WORKDIR /home/${USERNAME}/${PROJECT_NAME}
 786 |  127 | --------------------------------------------------------------------------------
 787 |  128 |
 788 |  129 | /context/cpu/docker-compose.yaml:
 789 |  130 | --------------------------------------------------------------------------------
 790 |  131 |  1 | services:
 791 |  132 |  2 |   python-dev: # サービス名 (任意)
 792 |  133 |  3 |     build:
 793 |  134 |  4 |       context: ../../context/
 794 |  135 |  5 |       dockerfile: Dockerfile
 795 |  136 |  6 |       args:
 796 |  137 |  7 |         POETRY_VERSION: ${POETRY_VERSION}
 797 |  138 |  8 |         POETRY_HOME: ${POETRY_HOME}
 798 |  139 |  9 |         USER_UID: ${USER_UID}
 799 |  140 | 10 |         USERNAME: ${USERNAME}
 800 |  141 | 11 |         PROJECT_NAME: ${PROJECT_NAME}
 801 |  142 | 12 |     container_name: ${CONTAINER_NAME}
 802 |  143 | 13 |     volumes:
 803 |  144 | 14 |       - type: bind
 804 |  145 | 15 |         source: ../../
 805 |  146 | 16 |         target: /home/${USERNAME}/${PROJECT_NAME}
 806 |  147 | 17 |     working_dir: /home/${USERNAME}/${PROJECT_NAME}
 807 |  148 | 18 |     tty: true
 808 |  149 | 19 |     restart: always # コンテナが停止した場合に常に再起動する
 809 |  150 | --------------------------------------------------------------------------------
 810 |  151 |
 811 |  152 | /experimentation/config.py:
 812 |  153 | --------------------------------------------------------------------------------
 813 |  154 |  1 | import yaml
 814 |  155 |  2 | from pydantic import BaseModel
 815 |  156 |  3 | from typing import List
 816 |  157 |  4 | from pathlib import Path
 817 |  158 |  5 |
 818 |  159 |  6 | class IgnoreExtensionsConfig(BaseModel):
 819 |  160 |  7 |     images: List[str] | None
 820 |  161 |  8 |     videos: List[str] | None
 821 |  162 |  9 |     compressed: List[str] | None
 822 |  163 | 10 |     binaries: List[str] | None
 823 |  164 | 11 |     documents: List[str] | None
 824 |  165 | 12 |     others: List[str] | None
 825 |  166 | 13 |
 826 |  167 | 14 |     def all_extensions(self) -> List[str]:
 827 |  168 | 15 |         """全ての拡張子を取得する"""
 828 |  169 | 16 |         all_exts = []
 829 |  170 | 17 |         for attr in self.__dict__.values():
 830 |  171 | 18 |             if isinstance(attr, list):
 831 |  172 | 19 |                 all_exts.extend(attr)
 832 |  173 | 20 |         return all_exts
 833 |  174 | 21 |
 834 |  175 | 22 |
 835 |  176 | 23 |
 836 |  177 | 24 | class Config(BaseModel):
 837 |  178 | 25 |     ignore_dirs: List[str] | None
 838 |  179 | 26 |     ignore_files: List[str] | None
 839 |  180 | 27 |     ignore_extensions: IgnoreExtensionsConfig | None
 840 |  181 | 28 |
 841 |  182 | 29 |
 842 |  183 | 30 | def get_config(settings_yaml_path: Path)->Config:
 843 |  184 | 31 |     with open(settings_yaml_path, 'rb') as f:
 844 |  185 | 32 |         yml = yaml.safe_load(f)
 845 |  186 | 33 |
 846 |  187 | 34 |     return Config.model_validate(yml)
 847 |  188 | 35 |
 848 |  189 | 36 |
 849 |  190 | 37 | def main() -> None:
 850 |  191 | 38 |     settings_yaml_path = Path('./settings.yml')
 851 |  192 | 39 |     config = get_config(settings_yaml_path)
 852 |  193 | 40 |
 853 |  194 | 41 |     print()
 854 |  195 | 42 |     print(f"{getattr(config, 'ignore_dirs')=}")
 855 |  196 | 43 |     print()
 856 |  197 | 44 |     print(f"{getattr(config, 'ignore_extensions')=}")
 857 |  198 | 45 |     print()
 858 |  199 | 46 |     print(f"{getattr(config.ignore_extensions, 'images')=}")
 859 |  200 | 47 |     print()
 860 |  201 | 48 |     print(config.ignore_extensions.all_extensions())
 861 |  202 | 49 |     print()
 862 |  203 | 50 |
 863 |  204 | 51 |
 864 |  205 | 52 | if __name__ == "__main__":
 865 |  206 | 53 |     main()
 866 |  207 | --------------------------------------------------------------------------------
 867 |  208 |
 868 |  209 | /experimentation/directory_lister.py:
 869 |  210 | --------------------------------------------------------------------------------
 870 |  211 |   1 | from pathlib import Path
 871 |  212 |   2 | from typing import List
 872 |  213 |   3 | from config import get_config, Config
 873 |  214 |   4 |
 874 |  215 |   5 | import os
 875 |  216 |   6 | import sys
 876 |  217 |   7 |
 877 |  218 |   8 |
 878 |  219 |   9 | class DirectoryLister:
 879 |  220 |  10 |     def __init__(
 880 |  221 |  11 |             self,
 881 |  222 |  12 |             directory_path: Path,
 882 |  223 |  13 |             output_file: Path,
 883 |  224 |  14 |             config: Config
 884 |  225 |  15 |     ):
 885 |  226 |  16 |         self.root_path = directory_path.resolve() # 絶対パスに変換
 886 |  227 |  17 |         self.output_file = output_file
 887 |  228 |  18 |         self.config = config
 888 |  229 |  19 |
 889 |  230 |  20 |         if not self.root_path.is_dir():
 890 |  231 |  21 |             raise ValueError(f"{self.root_path} is not a directory.")
 891 |  232 |  22 |
 892 |  233 |  23 |         self.ignore_dirs = getattr(self.config, "ignore_dirs")
 893 |  234 |  24 |         self.ignore_files = getattr(self.config, "ignore_files")
 894 |  235 |  25 |         self.ignore_extensions = getattr(self.config.ignore_extensions, "all_extensions")()
 895 |  236 |  26 |         self.ignore_files.append(str(output_file)) # 過去に出力したテキストを無視する必要がある
 896 |  237 |  27 |
 897 |  238 |  28 |
 898 |  239 |  29 |     def _should_ignore(self, path: Path) -> bool:
 899 |  240 |  30 |         """指定されたパスが無視対象かどうかを判定する"""
 900 |  241 |  31 |         if any(part in self.ignore_dirs for part in path.parts): return True # ディレクトリ名で無視
 901 |  242 |  32 |         if path.name in self.ignore_files: return True # ファイル名で無視
 902 |  243 |  33 |         if path.suffix.lower() in self.ignore_extensions: return True # 拡張子で無視
 903 |  244 |  34 |
 904 |  245 |  35 |         return False
 905 |  246 |  36 |
 906 |  247 |  37 |
 907 |  248 |  38 |     def _get_sorted_items(self, directory: Path) -> List[Path]:
 908 |  249 |  39 |         """指定されたディレクトリ内のアイテムを無視対象を除外してソートする. 内部メソッド"""
 909 |  250 |  40 |         # TODO: パーミッションエラーやディレクトリを見つけられなかった時のエラーハンドリングを追加する
 910 |  251 |  41 |
 911 |  252 |  42 |         # ディレクトリ内のアイテムを取得し、無視対象を除外してソート
 912 |  253 |  43 |         filtered_items = [item for item in directory.iterdir() if not self._should_ignore(item)]
 913 |  254 |  44 |         items = sorted(
 914 |  255 |  45 |             filtered_items,
 915 |  256 |  46 |             key=lambda x: (x.is_file(), x.name.lower()) # ディレクトリを先に、次にファイル名でソート
 916 |  257 |  47 |         )
 917 |  258 |  48 |         return items
 918 |  259 |  49 |
 919 |  260 |  50 |
 920 |  261 |  51 |     def _generate_tree_recursive(
 921 |  262 |  52 |             self,
 922 |  263 |  53 |             current_path: Path,
 923 |  264 |  54 |             prefix: str = "",
 924 |  265 |  55 |             is_last: bool=True
 925 |  266 |  56 |     ) -> str:
 926 |  267 |  57 |         """ディレクトリ構造をtree形式で再帰的に生成する（内部メソッド）"""
 927 |  268 |  58 |         structure = ""
 928 |  269 |  59 |         connector = '└── ' if is_last else '├── '
 929 |  270 |  60 |
 930 |  271 |  61 |         try:
 931 |  272 |  62 |             structure += f"{prefix}{connector}{current_path.name}\n"
 932 |  273 |  63 |
 933 |  274 |  64 |             # ディレクトリの場合は再起的に呼び出す
 934 |  275 |  65 |             if current_path.is_dir():
 935 |  276 |  66 |                 new_prefix = prefix + ('    ' if is_last else '│   ')
 936 |  277 |  67 |                 # サブアイテムを取得する
 937 |  278 |  68 |                 items = self._get_sorted_items(current_path)
 938 |  279 |  69 |                 item_count = len(items)
 939 |  280 |  70 |
 940 |  281 |  71 |                 for i, item in enumerate(items):
 941 |  282 |  72 |                     is_last_item= (i == item_count - 1)
 942 |  283 |  73 |                     # 再帰的に呼び出す
 943 |  284 |  74 |                     structure += self._generate_tree_recursive(item, new_prefix, is_last_item)
 944 |  285 |  75 |
 945 |  286 |  76 |         except OSError as e:
 946 |  287 |  77 |             structure += f"{prefix}{connector}[エラー: {e.strerror} ({current_path.name})]\n"
 947 |  288 |  78 |         except Exception as e:
 948 |  289 |  79 |             structure += f"{prefix}{connector}[予期せぬエラー: {e} ({current_path.name})]\n"
 949 |  290 |  80 |
 950 |  291 |  81 |         return structure
 951 |  292 |  82 |
 952 |  293 |  83 |
 953 |  294 |  84 |     def generate_tree_structure(self)-> str:
 954 |  295 |  85 |         """ルートディレクトリから始まる全体のディレクt理構造の文字列を生成する"""
 955 |  296 |  86 |         structure = f"{self.root_path.name}"
 956 |  297 |  87 |
 957 |  298 |  88 |         # ルートディレクトリのアイテムを取得
 958 |  299 |  89 |         items = self._get_sorted_items(self.root_path)
 959 |  300 |  90 |
 960 |  301 |  91 |         # 各アイテムに対して再起的に処理をする
 961 |  302 |  92 |         num_items = len(items)
 962 |  303 |  93 |         for i, item in enumerate(items):
 963 |  304 |  94 |             is_last_item = (i == num_items - 1)
 964 |  305 |  95 |             structure += self._generate_tree_recursive(item, "", is_last_item) # prefixは空文字列で初期化
 965 |  306 |  96 |
 966 |  307 |  97 |         return structure
 967 |  308 |  98 |
 968 |  309 |  99 |
 969 |  310 | 100 |     def _format_file_content(self, file_path: Path) -> str:
 970 |  311 | 101 |         """単一のファイルのパスと内容を読み込み、整形して文字列で返す。 内部メソッド"""
 971 |  312 | 102 |
 972 |  313 | 103 |         content_str = "" # 結果の文字列
 973 |  314 | 104 |         separator = "-" * 80 + "\n" # 区切り線の定義
 974 |  315 | 105 |
 975 |  316 | 106 |         # 相対パスの取得
 976 |  317 | 107 |         relative_path = file_path.relative_to(self.root_path) # 相対パスを取得
 977 |  318 | 108 |         content_str += f"\n\n/{relative_path}:\n" # 相対パスを表示
 978 |  319 | 109 |
 979 |  320 | 110 |         content_str += separator
 980 |  321 | 111 |
 981 |  322 | 112 |         # ファイルの内容を読み込む
 982 |  323 | 113 |         try:
 983 |  324 | 114 |             with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
 984 |  325 | 115 |                 lines = f.readlines() # ファイルの全行をリストとして読み込む
 985 |  326 | 116 |
 986 |  327 | 117 |             if not lines: # 空ファイルの場合
 987 |  328 | 118 |                 content_str += " [空ファイル]\n"
 988 |  329 | 119 |             else:
 989 |  330 | 120 |                 max_digits = len(str(len(lines))) # 行番号の桁数を計算。仮に20行であればmax_digitsは2になる。
 990 |  331 | 121 |                 for i, line in enumerate(lines):
 991 |  332 | 122 |                     line_num_str = str(i+1).rjust(max_digits) # 行番号を右寄せで整形
 992 |  333 | 123 |                     content_str += f"{line_num_str} | {line.rstrip()}\n" # 行末の改行文字（rstrip()）を除去して、整形して追加
 993 |  334 | 124 |         except PermissionError:
 994 |  335 | 125 |             content_str += f" [エラー] ファイル '{file_path.name}' へのアクセス権がありません。\n"
 995 |  336 | 126 |         except OSError as e:
 996 |  337 | 127 |             content_str += f" [エラー] ファイル '{file_path.name}' 読み込み中にOSエラーが発生しました: {e.strerror}\n"
 997 |  338 | 128 |         except Exception as e:
 998 |  339 | 129 |             content_str += f" [エラー] ファイル '{file_path.name}' 読み込み中に予期せぬエラーが発生しました: {e}\n"
 999 |  340 | 130 |
1000 |  341 | 131 |         content_str += separator # 最後に区切り線を追加
1001 |  342 | 132 |         return content_str
1002 |  343 | 133 |
1003 |  344 | 134 |
1004 |  345 | 135 |     def generate_file_contents(self)->str:
1005 |  346 | 136 |         """全ファイルのパスと内容を行番号付きで取得する"""
1006 |  347 | 137 |         contents=""
1007 |  348 | 138 |
1008 |  349 | 139 |         files = [os.path.join(dirpath, f) for dirpath, _, filenames in os.walk(self.root_path) for f in filenames]
1009 |  350 | 140 |         files = [item for item in files if not self._should_ignore(Path(item))] # 無視対象を除外
1010 |  351 | 141 |         files = sorted(files, key=lambda x: (os.path.isfile(x), x.lower())) # ディレクトリを先に、次にファイル名でソート
1011 |  352 | 142 |         files = [Path(item) for item in files] # Pathオブジェクトに変換
1012 |  353 | 143 |
1013 |  354 | 144 |         for file in files:
1014 |  355 | 145 |             contents += self._format_file_content(file)
1015 |  356 | 146 |
1016 |  357 | 147 |         return contents
1017 |  358 | 148 |
1018 |  359 | 149 |
1019 |  360 | 150 |     def write_to_file(self, tree_structure: str, file_contents: str) -> None:
1020 |  361 | 151 |         """
1021 |  362 | 152 |         生成したディレクトリ構造とファイル内容を指定されたファイルに書き込む。
1022 |  363 | 153 |
1023 |  364 | 154 |         Args:
1024 |  365 | 155 |             tree_structure (str): generate_tree_structureで生成された文字列。
1025 |  366 | 156 |             file_contents (str): generate_file_contentsで生成された文字列。
1026 |  367 | 157 |         """
1027 |  368 | 158 |         print(f"ファイル '{self.output_file}' に書き込み中...")
1028 |  369 | 159 |         try:
1029 |  370 | 160 |             # --- 出力ファイルの親ディレクトリが存在しない場合に作成 ---
1030 |  371 | 161 |             # self.output_path.parent は出力ファイルの親ディレクトリのPathオブジェクト
1031 |  372 | 162 |             # parents=True: 中間ディレクトリもまとめて作成 (例: /a/b/c.txt で a, b がなくても作る)
1032 |  373 | 163 |             # exist_ok=True: ディレクトリが既に存在していてもエラーにしない
1033 |  374 | 164 |             self.output_file.parent.mkdir(parents=True, exist_ok=True)
1034 |  375 | 165 |
1035 |  376 | 166 |             # --- ファイルへの書き込み ---
1036 |  377 | 167 |             # 'w'モード: 書き込みモード。ファイルが存在すれば上書き、なければ新規作成。
1037 |  378 | 168 |             # encoding='utf-8': UTF-8エンコーディングで書き込む。
1038 |  379 | 169 |             with open(self.output_file, 'w', encoding='utf-8') as f:
1039 |  380 | 170 |                 f.write("--- ディレクトリ構造 ---\n")
1040 |  381 | 171 |                 f.write(tree_structure)
1041 |  382 | 172 |                 f.write("\n\n--- ファイル内容 ---\n") # 構造と内容の間に区切りを入れる
1042 |  383 | 173 |                 f.write(file_contents)
1043 |  384 | 174 |
1044 |  385 | 175 |             # 成功メッセージ (絶対パスで表示すると分かりやすい)
1045 |  386 | 176 |             print(f"ディレクトリリストが '{self.output_file.resolve()}' に出力されました。")
1046 |  387 | 177 |
1047 |  388 | 178 |         except IOError as e:
1048 |  389 | 179 |             # ファイル書き込みに関するエラー (ディスクフル、アクセス権など)
1049 |  390 | 180 |             print(f"エラー: ファイル '{self.output_file}' に書き込めませんでした: {e}", file=sys.stderr)
1050 |  391 | 181 |         except Exception as e:
1051 |  392 | 182 |             # その他の予期せぬエラー
1052 |  393 | 183 |             print(f"予期せぬエラーが発生しました: {e}", file=sys.stderr)
1053 |  394 | 184 |     def run(self) -> None:
1054 |  395 | 185 |         """
1055 |  396 | 186 |         ディレクトリリスト化の全処理を実行する。
1056 |  397 | 187 |         """
1057 |  398 | 188 |         print(f"処理を開始します: {self.root_path}")
1058 |  399 | 189 |         try:
1059 |  400 | 190 |             # 1. ディレクトリ構造を生成
1060 |  401 | 191 |             tree_structure = self.generate_tree_structure()
1061 |  402 | 192 |
1062 |  403 | 193 |             # 2. ファイル内容を生成
1063 |  404 | 194 |             file_contents = self.generate_file_contents()
1064 |  405 | 195 |
1065 |  406 | 196 |             # 3. ファイルに書き込み
1066 |  407 | 197 |             self.write_to_file(tree_structure, file_contents)
1067 |  408 | 198 |
1068 |  409 | 199 |             print("処理が正常に完了しました。")
1069 |  410 | 200 |
1070 |  411 | 201 |         except Exception as e:
1071 |  412 | 202 |             # run の中で予期せぬエラーが起きた場合 (各メソッド内で捕捉されなかった場合など)
1072 |  413 | 203 |             print(f"\n処理中にエラーが発生しました: {e}", file=sys.stderr)
1073 |  414 | 204 |             # ここでプログラムを終了させるか、呼び出し元にエラーを伝えるかは設計による
1074 |  415 | 205 |             # 今回は呼び出し元 (mainブロック) で最終的なエラーハンドリングを行う想定
1075 |  416 | 206 |             raise # 捕捉したエラーを再度送出する
1076 |  417 | 207 |
1077 |  418 | 208 |
1078 |  419 | 209 | def test_should_ignore(lister: DirectoryLister) -> None:
1079 |  420 | 210 |     # テスト用のPathオブジェクトを作成 (Windows/Mac/Linuxで互換性のある書き方)
1080 |  421 | 211 |     test_path_git = Path(".git") / "config" # 相対パスで作成
1081 |  422 | 212 |     test_path_pycache = Path("my_module") / "__pycache__" / "cache_file.pyc"
1082 |  423 | 213 |     test_path_dsstore = Path("images") / ".DS_Store"
1083 |  424 | 214 |     test_path_log = Path("logs") / "app.log"
1084 |  425 | 215 |     test_path_normal_file = Path("src") / "main.py"
1085 |  426 | 216 |     test_path_normal_dir = Path("data")
1086 |  427 | 217 |     test_path_root_ignored_file = Path(".env")
1087 |  428 | 218 |     test_path_image = Path("assets") / "logo.png"
1088 |  429 | 219 |
1089 |  430 | 220 |     print("-" * 20)
1090 |  431 | 221 |     print("無視判定テスト:")
1091 |  432 | 222 |     print(f"'{test_path_git}' は無視対象? -> {lister._should_ignore(test_path_git)}") # Trueのはず
1092 |  433 | 223 |     print(f"'{test_path_pycache}' は無視対象? -> {lister._should_ignore(test_path_pycache)}") # Trueのはず
1093 |  434 | 224 |     print(f"'{test_path_dsstore}' は無視対象? -> {lister._should_ignore(test_path_dsstore)}") # Trueのはず
1094 |  435 | 225 |     print(f"'{test_path_log}' は無視対象? -> {lister._should_ignore(test_path_log)}") # Trueのはず
1095 |  436 | 226 |     print(f"'{test_path_normal_file}' は無視対象? -> {lister._should_ignore(test_path_normal_file)}") # Falseのはず
1096 |  437 | 227 |     print(f"'{test_path_normal_dir}' は無視対象? -> {lister._should_ignore(test_path_normal_dir)}") # Falseのはず
1097 |  438 | 228 |     print(f"'{test_path_root_ignored_file}' は無視対象? -> {lister._should_ignore(test_path_root_ignored_file)}") # Trueのはず
1098 |  439 | 229 |     print(f"'{test_path_image}' は無視対象? -> {lister._should_ignore(test_path_image)}") # Trueのはず
1099 |  440 | 230 |     print("-" * 20)
1100 |  441 | 231 |
1101 |  442 | 232 |
1102 |  443 | 233 | def test_get_sorted_items() -> None:
1103 |  444 | 234 |     # テスト用のディレクトリとファイルを作成
1104 |  445 | 235 |     test_base_dir = Path("./temp_lister_test")
1105 |  446 | 236 |     test_base_dir.mkdir(exist_ok=True)
1106 |  447 | 237 |     (test_base_dir / "dir_a").mkdir(exist_ok=True)
1107 |  448 | 238 |     (test_base_dir / "file_z.txt").touch(exist_ok=True)
1108 |  449 | 239 |     (test_base_dir / "File_B.py").touch(exist_ok=True)
1109 |  450 | 240 |     (test_base_dir / "dir_c").mkdir(exist_ok=True)
1110 |  451 | 241 |     (test_base_dir / ".env").touch(exist_ok=True) # 無視されるファイル
1111 |  452 | 242 |     (test_base_dir / "image.png").touch(exist_ok=True) # 無視される拡張子
1112 |  453 | 243 |     (test_base_dir / ".git").mkdir(exist_ok=True) # 無視されるディレクトリ
1113 |  454 | 244 |
1114 |  455 | 245 |     # Listerインスタンスを作成 (テストディレクトリを対象)
1115 |  456 | 246 |     lister = DirectoryLister(
1116 |  457 | 247 |         Path(test_base_dir),
1117 |  458 | 248 |         Path("./output.txt"),
1118 |  459 | 249 |         config=get_config(Path('./settings.yml'))
1119 |  460 | 250 |     )
1120 |  461 | 251 |
1121 |  462 | 252 |     print(f"\n'{test_base_dir}' 内のソート済みアイテム:")
1122 |  463 | 253 |     sorted_items = lister._get_sorted_items(test_base_dir)
1123 |  464 | 254 |     if not sorted_items:
1124 |  465 | 255 |         print("  (アイテムが見つからないか、アクセスエラー)")
1125 |  466 | 256 |     for item in sorted_items:
1126 |  467 | 257 |         item_type = "Dir " if item.is_dir() else "File"
1127 |  468 | 258 |         print(f"  {item_type}: {item.name}")
1128 |  469 | 259 |
1129 |  470 | 260 |     # 期待される出力順序の確認 (手動)
1130 |  471 | 261 |     # dir_a, dir_c, File_B.py, file_z.txt の順になるはず
1131 |  472 | 262 |
1132 |  473 | 263 |
1133 |  474 | 264 | def main() -> None:
1134 |  475 | 265 |     # インスタンス化
1135 |  476 | 266 |     lister = DirectoryLister(
1136 |  477 | 267 |         directory_path=Path('./'),
1137 |  478 | 268 |         output_file=Path('text.txt'),
1138 |  479 | 269 |         config=get_config(Path('./settings.yml'))
1139 |  480 | 270 |     )
1140 |  481 | 271 |
1141 |  482 | 272 |     structure = lister.generate_tree_structure()
1142 |  483 | 273 |     print("-"*30)
1143 |  484 | 274 |     print(structure)
1144 |  485 | 275 |
1145 |  486 | 276 |     # ディレクトリリスト化を実行
1146 |  487 | 277 |     lister.run()
1147 |  488 | 278 |
1148 |  489 | 279 |     # for item in a:
1149 |  490 | 280 |     #     print(item)
1150 |  491 | 281 |
1151 |  492 | 282 |     # test_should_ignore(lister)
1152 |  493 | 283 |     # test_get_sorted_items()
1153 |  494 | 284 |
1154 |  495 | 285 |
1155 |  496 | 286 | if __name__ == "__main__":
1156 |  497 | 287 |     main()
1157 |  498 | --------------------------------------------------------------------------------
1158 |  499 |
1159 |  500 | /experimentation/entrypoint.py:
1160 |  501 | --------------------------------------------------------------------------------
1161 |  502 |   1 | from pathlib import Path
1162 |  503 |   2 |
1163 |  504 |   3 | from config import get_config, Config
1164 |  505 |   4 |
1165 |  506 |   5 | # 無視するディレクトリやファイル、拡張子の設定を取得
1166 |  507 |   6 | settings_yaml_path = Path('./settings.yml')
1167 |  508 |   7 | CONFIG = get_config(settings_yaml_path)
1168 |  509 |   8 |
1169 |  510 |   9 |
1170 |  511 |  10 | def should_ignore(path: Path, config: Config=CONFIG) -> bool:
1171 |  512 |  11 |     """指定されたパスが無視対象かどうかを判定する"""
1172 |  513 |  12 |     # ディレクトリ名で無視
1173 |  514 |  13 |
1174 |  515 |  14 |     if any(part in getattr(config, "ignore_dirs") for part in path.parts):
1175 |  516 |  15 |         return True
1176 |  517 |  16 |     # ファイル名で無視
1177 |  518 |  17 |     if path.name in getattr(config, "ignore_files"):
1178 |  519 |  18 |         return True
1179 |  520 |  19 |     # 拡張子で無視
1180 |  521 |  20 |     if path.suffix.lower() in config.ignore_extensions.all_extensions():
1181 |  522 |  21 |         return True
1182 |  523 |  22 |     return False
1183 |  524 |  23 |
1184 |  525 |  24 |
1185 |  526 |  25 | def generate_tree(start_path: Path, prefix: str = '', is_last: bool = True) -> str:
1186 |  527 |  26 |     """ディレクトリ構造をtree形式で生成する再帰関数"""
1187 |  528 |  27 |     structure = ""
1188 |  529 |  28 |     # 無視対象のディレクトリ/ファイルは処理しない
1189 |  530 |  29 |     if should_ignore(start_path):
1190 |  531 |  30 |         return ""
1191 |  532 |  31 |
1192 |  533 |  32 |     connector = '└── ' if is_last else '├── '
1193 |  534 |  33 |     structure += f"{prefix}{connector}{start_path.name}\n"
1194 |  535 |  34 |
1195 |  536 |  35 |     if start_path.is_dir():
1196 |  537 |  36 |         new_prefix = prefix + ('    ' if is_last else '│   ')
1197 |  538 |  37 |         # ディレクトリ内のアイテムを取得し、無視対象を除外してソート
1198 |  539 |  38 |         items = sorted(
1199 |  540 |  39 |             [item for item in start_path.iterdir() if not should_ignore(item)],
1200 |  541 |  40 |             key=lambda x: (x.is_file(), x.name.lower()) # ディレクトリを先に、次にファイル名でソート
1201 |  542 |  41 |         )
1202 |  543 |  42 |         for i, item in enumerate(items):
1203 |  544 |  43 |             is_last_item = (i == len(items) - 1)
1204 |  545 |  44 |             structure += generate_tree(item, new_prefix, is_last_item)
1205 |  546 |  45 |
1206 |  547 |  46 |     return structure
1207 |  548 |  47 |
1208 |  549 |  48 |
1209 |  550 |  49 | def get_file_contents(root_path: Path) -> str:
1210 |  551 |  50 |     """指定されたディレクトリ以下の全ファイルのパスと内容を行番号付きで取得する"""
1211 |  552 |  51 |     contents = ""
1212 |  553 |  52 |     separator = "-" * 80 + "\n"
1213 |  554 |  53 |     processed_files_count = 0
1214 |  555 |  54 |
1215 |  556 |  55 |     # rglob で再帰的にファイルを取得し、パスでソート
1216 |  557 |  56 |     all_paths = sorted([p for p in root_path.rglob('*')])
1217 |  558 |  57 |
1218 |  559 |  58 |     for item in all_paths:
1219 |  560 |  59 |         # 無視対象をスキップ
1220 |  561 |  60 |         if should_ignore(item):
1221 |  562 |  61 |             continue
1222 |  563 |  62 |
1223 |  564 |  63 |         if item.is_file():
1224 |  565 |  64 |             processed_files_count += 1
1225 |  566 |  65 |             # ルートパスからの相対パスを取得し、先頭に / を追加
1226 |  567 |  66 |             try:
1227 |  568 |  67 |                 relative_path = item.relative_to(root_path)
1228 |  569 |  68 |                 contents += f"\n/{relative_path}:\n"
1229 |  570 |  69 |             except ValueError:
1230 |  571 |  70 |                 # root_path自身がファイルの場合など
1231 |  572 |  71 |                 contents += f"\n/{item.name}:\n"
1232 |  573 |  72 |
1233 |  574 |  73 |             contents += separator
1234 |  575 |  74 |             try:
1235 |  576 |  75 |                 # さまざまなエンコーディングに対応し、エラーは無視
1236 |  577 |  76 |                 with open(item, 'r', encoding='utf-8', errors='ignore') as f:
1237 |  578 |  77 |                     lines = f.readlines()
1238 |  579 |  78 |                     if not lines:
1239 |  580 |  79 |                         contents += " [空ファイル]\n"
1240 |  581 |  80 |                     else:
1241 |  582 |  81 |                         # 行番号の桁数を計算
1242 |  583 |  82 |                         max_digits = len(str(len(lines)))
1243 |  584 |  83 |                         for i, line in enumerate(lines):
1244 |  585 |  84 |                             # 行番号を右寄せでフォーマット
1245 |  586 |  85 |                             line_num_str = str(i + 1).rjust(max_digits)
1246 |  587 |  86 |                             # 末尾の改行は維持しつつ、余分な空白は削除
1247 |  588 |  87 |                             contents += f"{line_num_str} | {line.rstrip()}\n"
1248 |  589 |  88 |             except Exception as e:
1249 |  590 |  89 |                 contents += f" [エラー] ファイル読み込み中にエラーが発生しました: {e}\n"
1250 |  591 |  90 |             contents += separator
1251 |  592 |  91 |
1252 |  593 |  92 |     if processed_files_count == 0:
1253 |  594 |  93 |         contents += "\n[指定されたディレクトリ内に処理対象ファイルが見つかりませんでした]\n"
1254 |  595 |  94 |
1255 |  596 |  95 |     return contents
1256 |  597 |  96 |
1257 |  598 |  97 | def generate_directory_listing(directory_path: str, output_file: str) -> None:
1258 |  599 |  98 |     """ディレクトリ構造とファイル内容を指定ファイルに出力する"""
1259 |  600 |  99 |     start_path = Path(directory_path).resolve() # 絶対パスに変換
1260 |  601 | 100 |     if not start_path.is_dir():
1261 |  602 | 101 |         print(f"エラー: '{directory_path}' は有効なディレクトリではありません。")
1262 |  603 | 102 |         return
1263 |  604 | 103 |
1264 |  605 | 104 |     print(f"処理を開始します: {start_path}")
1265 |  606 | 105 |     print(f"出力ファイル: {output_file}")
1266 |  607 | 106 |
1267 |  608 | 107 |     # ディレクトリ構造の取得 (tree形式)
1268 |  609 | 108 |     print("ディレクトリ構造を生成中...")
1269 |  610 | 109 |     # ルートディレクトリ自体も表示するために少し調整
1270 |  611 | 110 |     structure = f"{start_path.name}\n"
1271 |  612 | 111 |     items = sorted(
1272 |  613 | 112 |         [item for item in start_path.iterdir() if not should_ignore(item)],
1273 |  614 | 113 |          key=lambda x: (x.is_file(), x.name.lower())
1274 |  615 | 114 |     )
1275 |  616 | 115 |     for i, item in enumerate(items):
1276 |  617 | 116 |         is_last_item = (i == len(items) - 1)
1277 |  618 | 117 |         structure += generate_tree(item, '', is_last_item)
1278 |  619 | 118 |     print("ディレクトリ構造の生成完了。")
1279 |  620 | 119 |
1280 |  621 | 120 |     # ファイル内容の取得
1281 |  622 | 121 |     print("ファイル内容を取得中...")
1282 |  623 | 122 |     file_contents_data = get_file_contents(start_path)
1283 |  624 | 123 |     print("ファイル内容の取得完了。")
1284 |  625 | 124 |
1285 |  626 | 125 |     # ファイルへの書き込み
1286 |  627 | 126 |     print("ファイルに書き込み中...")
1287 |  628 | 127 |     try:
1288 |  629 | 128 |         # 出力ファイルのディレクトリが存在しない場合は作成
1289 |  630 | 129 |         output_path = Path(output_file)
1290 |  631 | 130 |         output_path.parent.mkdir(parents=True, exist_ok=True)
1291 |  632 | 131 |
1292 |  633 | 132 |         with open(output_path, 'w', encoding='utf-8') as f:
1293 |  634 | 133 |             f.write(structure)
1294 |  635 | 134 |             f.write("\n\n") # treeと内容の間に空行を入れる
1295 |  636 | 135 |             f.write(file_contents_data)
1296 |  637 | 136 |         print(f"ディレクトリリストが '{output_path.resolve()}' に出力されました。")
1297 |  638 | 137 |     except IOError as e:
1298 |  639 | 138 |         print(f"エラー: ファイル '{output_file}' に書き込めませんでした: {e}")
1299 |  640 | 139 |     except Exception as e:
1300 |  641 | 140 |         print(f"予期せぬエラーが発生しました: {e}")
1301 |  642 | 141 |
1302 |  643 | 142 |
1303 |  644 | 143 | def main() -> None:
1304 |  645 | 144 |     directory_path = "../"
1305 |  646 | 145 |     start_path = Path(directory_path).resolve() # 絶対パスに変換
1306 |  647 | 146 |     start_path = Path(directory_path).resolve().resolve() # 絶対パスに変換
1307 |  648 | 147 |
1308 |  649 | 148 |     generate_directory_listing(directory_path, "./entrypoint.txt")
1309 |  650 | 149 |
1310 |  651 | 150 |
1311 |  652 | 151 | # --- コマンドライン引数の処理とメイン実行部分 ---
1312 |  653 | 152 | if __name__ == "__main__":
1313 |  654 | 153 |     main()
1314 |  655 | --------------------------------------------------------------------------------
1315 |  656 |
1316 |  657 | /experimentation/pyproject.toml:
1317 |  658 | --------------------------------------------------------------------------------
1318 |  659 |  1 | [project]
1319 |  660 |  2 | name = "repository-reader"
1320 |  661 |  3 | version = "0.1.0"
1321 |  662 |  4 | description = ""
1322 |  663 |  5 | authors = [
1323 |  664 |  6 |     {name = "Your Name",email = "you@example.com"}
1324 |  665 |  7 | ]
1325 |  666 |  8 | readme = "README.md"
1326 |  667 |  9 | requires-python = ">=3.11"
1327 |  668 | 10 | dependencies = [
1328 |  669 | 11 |     "pyyaml (>=6.0.2,<7.0.0)",
1329 |  670 | 12 |     "pydantic (>=2.11.3,<3.0.0)"
1330 |  671 | 13 | ]
1331 |  672 | 14 |
1332 |  673 | 15 |
1333 |  674 | 16 | [build-system]
1334 |  675 | 17 | requires = ["poetry-core>=2.0.0,<3.0.0"]
1335 |  676 | 18 | build-backend = "poetry.core.masonry.api"
1336 |  677 | --------------------------------------------------------------------------------
1337 |  678 |
1338 |  679 | /experimentation/settings.yml:
1339 |  680 | --------------------------------------------------------------------------------
1340 |  681 |  1 | ignore_dirs:
1341 |  682 |  2 |   - ".git"
1342 |  683 |  3 |   - "__pycache__"
1343 |  684 |  4 |   - ".venv"
1344 |  685 |  5 |   - "node_modules"
1345 |  686 |  6 |   - ".vscode"
1346 |  687 |  7 |   - ".idea"
1347 |  688 |  8 |   - "build"
1348 |  689 |  9 |   - "dist"
1349 |  690 | 10 |   - "*.egg_info"
1350 |  691 | 11 |   - ".mypy_cache"
1351 |  692 | 12 | ignore_files:
1352 |  693 | 13 |   - ".DS_Store"
1353 |  694 | 14 |   - ".env"
1354 |  695 | 15 |   - "thumbs.db"
1355 |  696 | 16 | ignore_extensions:
1356 |  697 | 17 |   images:
1357 |  698 | 18 |     - '.png'
1358 |  699 | 19 |     - '.jpg'
1359 |  700 | 20 |     - '.jpeg'
1360 |  701 | 21 |     - '.gif'
1361 |  702 | 22 |     - '.bmp'
1362 |  703 | 23 |     - '.tiff'
1363 |  704 | 24 |     - '.webp'
1364 |  705 | 25 |     - '.svg'
1365 |  706 | 26 |     - '.ico'
1366 |  707 | 27 |   videos:
1367 |  708 | 28 |     - '.mp4'
1368 |  709 | 29 |     - '.mov'
1369 |  710 | 30 |     - '.avi'
1370 |  711 | 31 |     - '.wmv'
1371 |  712 | 32 |     - '.mp3'
1372 |  713 | 33 |     - '.wav'
1373 |  714 | 34 |     - '.ogg'
1374 |  715 | 35 |   compressed:
1375 |  716 | 36 |     - '.zip'
1376 |  717 | 37 |     - '.gz'
1377 |  718 | 38 |     - '.tar'
1378 |  719 | 39 |     - '.rar'
1379 |  720 | 40 |     - '.7z'
1380 |  721 | 41 |   binaries:
1381 |  722 | 42 |     - '.pyc'
1382 |  723 | 43 |     - '.pyo'
1383 |  724 | 44 |     - '.exe'
1384 |  725 | 45 |     - '.dll'
1385 |  726 | 46 |     - '.so'
1386 |  727 | 47 |     - '.o'
1387 |  728 | 48 |     - '.a'
1388 |  729 | 49 |     - '.lib'
1389 |  730 | 50 |   documents:
1390 |  731 | 51 |     - '.pdf'
1391 |  732 | 52 |     - '.doc'
1392 |  733 | 53 |     - '.docx'
1393 |  734 | 54 |     - '.xls'
1394 |  735 | 55 |     - '.xlsx'
1395 |  736 | 56 |     - '.ppt'
1396 |  737 | 57 |     - '.pptx'
1397 |  738 | 58 |   others:
1398 |  739 | 59 |     - '.lock'
1399 |  740 | 60 |     - '.log'
1400 |  741 | 61 |     - '.sqlite'
1401 |  742 | 62 |     - '.db'
1402 |  743 | 63 |
1403 |  744 | --------------------------------------------------------------------------------
1404 |  745 |
1405 |  746 | /experimentation/temp_lister_test/File_B.py:
1406 |  747 | --------------------------------------------------------------------------------
1407 |  748 |  [空ファイル]
1408 |  749 | --------------------------------------------------------------------------------
1409 |  750 |
1410 |  751 | /experimentation/temp_lister_test/file_z.txt:
1411 |  752 | --------------------------------------------------------------------------------
1412 |  753 |  [空ファイル]
1413 |  754 | --------------------------------------------------------------------------------
1414 |  755 |
1415 |  756 | /experimentation/text.txt:
1416 |  757 | --------------------------------------------------------------------------------
1417 |  758 |   1 | --- ディレクトリ構造 ---
1418 |  759 |   2 | experimentation├── temp_lister_test
1419 |  760 |   3 | │   ├── dir_a
1420 |  761 |   4 | │   ├── dir_c
1421 |  762 |   5 | │   ├── File_B.py
1422 |  763 |   6 | │   └── file_z.txt
1423 |  764 |   7 | ├── config.py
1424 |  765 |   8 | ├── directory_lister.py
1425 |  766 |   9 | ├── entrypoint.py
1426 |  767 |  10 | ├── pyproject.toml
1427 |  768 |  11 | └── settings.yml
1428 |  769 |  12 |
1429 |  770 |  13 |
1430 |  771 |  14 | --- ファイル内容 ---
1431 |  772 |  15 |
1432 |  773 |  16 |
1433 |  774 |  17 | /config.py:
1434 |  775 |  18 | --------------------------------------------------------------------------------
1435 |  776 |  19 |  1 | import yaml
1436 |  777 |  20 |  2 | from pydantic import BaseModel
1437 |  778 |  21 |  3 | from typing import List
1438 |  779 |  22 |  4 | from pathlib import Path
1439 |  780 |  23 |  5 |
1440 |  781 |  24 |  6 | class IgnoreExtensionsConfig(BaseModel):
1441 |  782 |  25 |  7 |     images: List[str] | None
1442 |  783 |  26 |  8 |     videos: List[str] | None
1443 |  784 |  27 |  9 |     compressed: List[str] | None
1444 |  785 |  28 | 10 |     binaries: List[str] | None
1445 |  786 |  29 | 11 |     documents: List[str] | None
1446 |  787 |  30 | 12 |     others: List[str] | None
1447 |  788 |  31 | 13 |
1448 |  789 |  32 | 14 |     def all_extensions(self) -> List[str]:
1449 |  790 |  33 | 15 |         """全ての拡張子を取得する"""
1450 |  791 |  34 | 16 |         all_exts = []
1451 |  792 |  35 | 17 |         for attr in self.__dict__.values():
1452 |  793 |  36 | 18 |             if isinstance(attr, list):
1453 |  794 |  37 | 19 |                 all_exts.extend(attr)
1454 |  795 |  38 | 20 |         return all_exts
1455 |  796 |  39 | 21 |
1456 |  797 |  40 | 22 |
1457 |  798 |  41 | 23 |
1458 |  799 |  42 | 24 | class Config(BaseModel):
1459 |  800 |  43 | 25 |     ignore_dirs: List[str] | None
1460 |  801 |  44 | 26 |     ignore_files: List[str] | None
1461 |  802 |  45 | 27 |     ignore_extensions: IgnoreExtensionsConfig | None
1462 |  803 |  46 | 28 |
1463 |  804 |  47 | 29 |
1464 |  805 |  48 | 30 | def get_config(settings_yaml_path: Path)->Config:
1465 |  806 |  49 | 31 |     with open(settings_yaml_path, 'rb') as f:
1466 |  807 |  50 | 32 |         yml = yaml.safe_load(f)
1467 |  808 |  51 | 33 |
1468 |  809 |  52 | 34 |     return Config.model_validate(yml)
1469 |  810 |  53 | 35 |
1470 |  811 |  54 | 36 |
1471 |  812 |  55 | 37 | def main() -> None:
1472 |  813 |  56 | 38 |     settings_yaml_path = Path('./settings.yml')
1473 |  814 |  57 | 39 |     config = get_config(settings_yaml_path)
1474 |  815 |  58 | 40 |
1475 |  816 |  59 | 41 |     print()
1476 |  817 |  60 | 42 |     print(f"{getattr(config, 'ignore_dirs')=}")
1477 |  818 |  61 | 43 |     print()
1478 |  819 |  62 | 44 |     print(f"{getattr(config, 'ignore_extensions')=}")
1479 |  820 |  63 | 45 |     print()
1480 |  821 |  64 | 46 |     print(f"{getattr(config.ignore_extensions, 'images')=}")
1481 |  822 |  65 | 47 |     print()
1482 |  823 |  66 | 48 |     print(config.ignore_extensions.all_extensions())
1483 |  824 |  67 | 49 |     print()
1484 |  825 |  68 | 50 |
1485 |  826 |  69 | 51 |
1486 |  827 |  70 | 52 | if __name__ == "__main__":
1487 |  828 |  71 | 53 |     main()
1488 |  829 |  72 | --------------------------------------------------------------------------------
1489 |  830 |  73 |
1490 |  831 |  74 |
1491 |  832 |  75 | /directory_lister.py:
1492 |  833 |  76 | --------------------------------------------------------------------------------
1493 |  834 |  77 |   1 | from pathlib import Path
1494 |  835 |  78 |   2 | from typing import List
1495 |  836 |  79 |   3 | from config import get_config, Config
1496 |  837 |  80 |   4 |
1497 |  838 |  81 |   5 | import os
1498 |  839 |  82 |   6 | import sys
1499 |  840 |  83 |   7 |
1500 |  841 |  84 |   8 |
1501 |  842 |  85 |   9 | class DirectoryLister:
1502 |  843 |  86 |  10 |     def __init__(
1503 |  844 |  87 |  11 |             self,
1504 |  845 |  88 |  12 |             directory_path: Path,
1505 |  846 |  89 |  13 |             output_file: Path,
1506 |  847 |  90 |  14 |             config: Config
1507 |  848 |  91 |  15 |     ):
1508 |  849 |  92 |  16 |         self.root_path = directory_path.resolve() # 絶対パスに変換
1509 |  850 |  93 |  17 |         self.output_file = output_file
1510 |  851 |  94 |  18 |         self.config = config
1511 |  852 |  95 |  19 |
1512 |  853 |  96 |  20 |         if not self.root_path.is_dir():
1513 |  854 |  97 |  21 |             raise ValueError(f"{self.root_path} is not a directory.")
1514 |  855 |  98 |  22 |
1515 |  856 |  99 |  23 |         self.ignore_dirs = getattr(self.config, "ignore_dirs")
1516 |  857 | 100 |  24 |         self.ignore_files = getattr(self.config, "ignore_files")
1517 |  858 | 101 |  25 |         self.ignore_extensions = getattr(self.config.ignore_extensions, "all_extensions")()
1518 |  859 | 102 |  26 |         self.ignore_files.append(str(output_file)) # 過去に出力したテキストを無視する必要がある
1519 |  860 | 103 |  27 |
1520 |  861 | 104 |  28 |
1521 |  862 | 105 |  29 |     def _should_ignore(self, path: Path) -> bool:
1522 |  863 | 106 |  30 |         """指定されたパスが無視対象かどうかを判定する"""
1523 |  864 | 107 |  31 |         if any(part in self.ignore_dirs for part in path.parts): return True # ディレクトリ名で無視
1524 |  865 | 108 |  32 |         if path.name in self.ignore_files: return True # ファイル名で無視
1525 |  866 | 109 |  33 |         if path.suffix.lower() in self.ignore_extensions: return True # 拡張子で無視
1526 |  867 | 110 |  34 |
1527 |  868 | 111 |  35 |         return False
1528 |  869 | 112 |  36 |
1529 |  870 | 113 |  37 |
1530 |  871 | 114 |  38 |     def _get_sorted_items(self, directory: Path) -> List[Path]:
1531 |  872 | 115 |  39 |         """指定されたディレクトリ内のアイテムを無視対象を除外してソートする. 内部メソッド"""
1532 |  873 | 116 |  40 |         # TODO: パーミッションエラーやディレクトリを見つけられなかった時のエラーハンドリングを追加する
1533 |  874 | 117 |  41 |
1534 |  875 | 118 |  42 |         # ディレクトリ内のアイテムを取得し、無視対象を除外してソート
1535 |  876 | 119 |  43 |         filtered_items = [item for item in directory.iterdir() if not self._should_ignore(item)]
1536 |  877 | 120 |  44 |         items = sorted(
1537 |  878 | 121 |  45 |             filtered_items,
1538 |  879 | 122 |  46 |             key=lambda x: (x.is_file(), x.name.lower()) # ディレクトリを先に、次にファイル名でソート
1539 |  880 | 123 |  47 |         )
1540 |  881 | 124 |  48 |         return items
1541 |  882 | 125 |  49 |
1542 |  883 | 126 |  50 |
1543 |  884 | 127 |  51 |     def _generate_tree_recursive(
1544 |  885 | 128 |  52 |             self,
1545 |  886 | 129 |  53 |             current_path: Path,
1546 |  887 | 130 |  54 |             prefix: str = "",
1547 |  888 | 131 |  55 |             is_last: bool=True
1548 |  889 | 132 |  56 |     ) -> str:
1549 |  890 | 133 |  57 |         """ディレクトリ構造をtree形式で再帰的に生成する（内部メソッド）"""
1550 |  891 | 134 |  58 |         structure = ""
1551 |  892 | 135 |  59 |         connector = '└── ' if is_last else '├── '
1552 |  893 | 136 |  60 |
1553 |  894 | 137 |  61 |         try:
1554 |  895 | 138 |  62 |             structure += f"{prefix}{connector}{current_path.name}\n"
1555 |  896 | 139 |  63 |
1556 |  897 | 140 |  64 |             # ディレクトリの場合は再起的に呼び出す
1557 |  898 | 141 |  65 |             if current_path.is_dir():
1558 |  899 | 142 |  66 |                 new_prefix = prefix + ('    ' if is_last else '│   ')
1559 |  900 | 143 |  67 |                 # サブアイテムを取得する
1560 |  901 | 144 |  68 |                 items = self._get_sorted_items(current_path)
1561 |  902 | 145 |  69 |                 item_count = len(items)
1562 |  903 | 146 |  70 |
1563 |  904 | 147 |  71 |                 for i, item in enumerate(items):
1564 |  905 | 148 |  72 |                     is_last_item= (i == item_count - 1)
1565 |  906 | 149 |  73 |                     # 再帰的に呼び出す
1566 |  907 | 150 |  74 |                     structure += self._generate_tree_recursive(item, new_prefix, is_last_item)
1567 |  908 | 151 |  75 |
1568 |  909 | 152 |  76 |         except OSError as e:
1569 |  910 | 153 |  77 |             structure += f"{prefix}{connector}[エラー: {e.strerror} ({current_path.name})]\n"
1570 |  911 | 154 |  78 |         except Exception as e:
1571 |  912 | 155 |  79 |             structure += f"{prefix}{connector}[予期せぬエラー: {e} ({current_path.name})]\n"
1572 |  913 | 156 |  80 |
1573 |  914 | 157 |  81 |         return structure
1574 |  915 | 158 |  82 |
1575 |  916 | 159 |  83 |
1576 |  917 | 160 |  84 |     def generate_tree_structure(self)-> str:
1577 |  918 | 161 |  85 |         """ルートディレクトリから始まる全体のディレクt理構造の文字列を生成する"""
1578 |  919 | 162 |  86 |         structure = f"{self.root_path.name}"
1579 |  920 | 163 |  87 |
1580 |  921 | 164 |  88 |         # ルートディレクトリのアイテムを取得
1581 |  922 | 165 |  89 |         items = self._get_sorted_items(self.root_path)
1582 |  923 | 166 |  90 |
1583 |  924 | 167 |  91 |         # 各アイテムに対して再起的に処理をする
1584 |  925 | 168 |  92 |         num_items = len(items)
1585 |  926 | 169 |  93 |         for i, item in enumerate(items):
1586 |  927 | 170 |  94 |             is_last_item = (i == num_items - 1)
1587 |  928 | 171 |  95 |             structure += self._generate_tree_recursive(item, "", is_last_item) # prefixは空文字列で初期化
1588 |  929 | 172 |  96 |
1589 |  930 | 173 |  97 |         return structure
1590 |  931 | 174 |  98 |
1591 |  932 | 175 |  99 |
1592 |  933 | 176 | 100 |     def _format_file_content(self, file_path: Path) -> str:
1593 |  934 | 177 | 101 |         """単一のファイルのパスと内容を読み込み、整形して文字列で返す。 内部メソッド"""
1594 |  935 | 178 | 102 |
1595 |  936 | 179 | 103 |         content_str = "" # 結果の文字列
1596 |  937 | 180 | 104 |         separator = "-" * 80 + "\n" # 区切り線の定義
1597 |  938 | 181 | 105 |
1598 |  939 | 182 | 106 |         # 相対パスの取得
1599 |  940 | 183 | 107 |         relative_path = file_path.relative_to(self.root_path) # 相対パスを取得
1600 |  941 | 184 | 108 |         content_str += f"\n\n/{relative_path}:\n" # 相対パスを表示
1601 |  942 | 185 | 109 |
1602 |  943 | 186 | 110 |         content_str += separator
1603 |  944 | 187 | 111 |
1604 |  945 | 188 | 112 |         # ファイルの内容を読み込む
1605 |  946 | 189 | 113 |         try:
1606 |  947 | 190 | 114 |             with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
1607 |  948 | 191 | 115 |                 lines = f.readlines() # ファイルの全行をリストとして読み込む
1608 |  949 | 192 | 116 |
1609 |  950 | 193 | 117 |             if not lines: # 空ファイルの場合
1610 |  951 | 194 | 118 |                 content_str += " [空ファイル]\n"
1611 |  952 | 195 | 119 |             else:
1612 |  953 | 196 | 120 |                 max_digits = len(str(len(lines))) # 行番号の桁数を計算。仮に20行であればmax_digitsは2になる。
1613 |  954 | 197 | 121 |                 for i, line in enumerate(lines):
1614 |  955 | 198 | 122 |                     line_num_str = str(i+1).rjust(max_digits) # 行番号を右寄せで整形
1615 |  956 | 199 | 123 |                     content_str += f"{line_num_str} | {line.rstrip()}\n" # 行末の改行文字（rstrip()）を除去して、整形して追加
1616 |  957 | 200 | 124 |         except PermissionError:
1617 |  958 | 201 | 125 |             content_str += f" [エラー] ファイル '{file_path.name}' へのアクセス権がありません。\n"
1618 |  959 | 202 | 126 |         except OSError as e:
1619 |  960 | 203 | 127 |             content_str += f" [エラー] ファイル '{file_path.name}' 読み込み中にOSエラーが発生しました: {e.strerror}\n"
1620 |  961 | 204 | 128 |         except Exception as e:
1621 |  962 | 205 | 129 |             content_str += f" [エラー] ファイル '{file_path.name}' 読み込み中に予期せぬエラーが発生しました: {e}\n"
1622 |  963 | 206 | 130 |
1623 |  964 | 207 | 131 |         content_str += separator # 最後に区切り線を追加
1624 |  965 | 208 | 132 |         return content_str
1625 |  966 | 209 | 133 |
1626 |  967 | 210 | 134 |
1627 |  968 | 211 | 135 |     def generate_file_contents(self)->str:
1628 |  969 | 212 | 136 |         """全ファイルのパスと内容を行番号付きで取得する"""
1629 |  970 | 213 | 137 |         contents=""
1630 |  971 | 214 | 138 |
1631 |  972 | 215 | 139 |         files = [os.path.join(dirpath, f) for dirpath, _, filenames in os.walk(self.root_path) for f in filenames]
1632 |  973 | 216 | 140 |         files = [item for item in files if not self._should_ignore(Path(item))] # 無視対象を除外
1633 |  974 | 217 | 141 |         files = sorted(files, key=lambda x: (os.path.isfile(x), x.lower())) # ディレクトリを先に、次にファイル名でソート
1634 |  975 | 218 | 142 |         files = [Path(item) for item in files] # Pathオブジェクトに変換
1635 |  976 | 219 | 143 |
1636 |  977 | 220 | 144 |         for file in files:
1637 |  978 | 221 | 145 |             contents += self._format_file_content(file)
1638 |  979 | 222 | 146 |
1639 |  980 | 223 | 147 |         return contents
1640 |  981 | 224 | 148 |
1641 |  982 | 225 | 149 |
1642 |  983 | 226 | 150 |     def write_to_file(self, tree_structure: str, file_contents: str) -> None:
1643 |  984 | 227 | 151 |         """
1644 |  985 | 228 | 152 |         生成したディレクトリ構造とファイル内容を指定されたファイルに書き込む。
1645 |  986 | 229 | 153 |
1646 |  987 | 230 | 154 |         Args:
1647 |  988 | 231 | 155 |             tree_structure (str): generate_tree_structureで生成された文字列。
1648 |  989 | 232 | 156 |             file_contents (str): generate_file_contentsで生成された文字列。
1649 |  990 | 233 | 157 |         """
1650 |  991 | 234 | 158 |         print(f"ファイル '{self.output_file}' に書き込み中...")
1651 |  992 | 235 | 159 |         try:
1652 |  993 | 236 | 160 |             # --- 出力ファイルの親ディレクトリが存在しない場合に作成 ---
1653 |  994 | 237 | 161 |             # self.output_path.parent は出力ファイルの親ディレクトリのPathオブジェクト
1654 |  995 | 238 | 162 |             # parents=True: 中間ディレクトリもまとめて作成 (例: /a/b/c.txt で a, b がなくても作る)
1655 |  996 | 239 | 163 |             # exist_ok=True: ディレクトリが既に存在していてもエラーにしない
1656 |  997 | 240 | 164 |             self.output_file.parent.mkdir(parents=True, exist_ok=True)
1657 |  998 | 241 | 165 |
1658 |  999 | 242 | 166 |             # --- ファイルへの書き込み ---
1659 | 1000 | 243 | 167 |             # 'w'モード: 書き込みモード。ファイルが存在すれば上書き、なければ新規作成。
1660 | 1001 | 244 | 168 |             # encoding='utf-8': UTF-8エンコーディングで書き込む。
1661 | 1002 | 245 | 169 |             with open(self.output_file, 'w', encoding='utf-8') as f:
1662 | 1003 | 246 | 170 |                 f.write("--- ディレクトリ構造 ---\n")
1663 | 1004 | 247 | 171 |                 f.write(tree_structure)
1664 | 1005 | 248 | 172 |                 f.write("\n\n--- ファイル内容 ---\n") # 構造と内容の間に区切りを入れる
1665 | 1006 | 249 | 173 |                 f.write(file_contents)
1666 | 1007 | 250 | 174 |
1667 | 1008 | 251 | 175 |             # 成功メッセージ (絶対パスで表示すると分かりやすい)
1668 | 1009 | 252 | 176 |             print(f"ディレクトリリストが '{self.output_file.resolve()}' に出力されました。")
1669 | 1010 | 253 | 177 |
1670 | 1011 | 254 | 178 |         except IOError as e:
1671 | 1012 | 255 | 179 |             # ファイル書き込みに関するエラー (ディスクフル、アクセス権など)
1672 | 1013 | 256 | 180 |             print(f"エラー: ファイル '{self.output_file}' に書き込めませんでした: {e}", file=sys.stderr)
1673 | 1014 | 257 | 181 |         except Exception as e:
1674 | 1015 | 258 | 182 |             # その他の予期せぬエラー
1675 | 1016 | 259 | 183 |             print(f"予期せぬエラーが発生しました: {e}", file=sys.stderr)
1676 | 1017 | 260 | 184 |     def run(self) -> None:
1677 | 1018 | 261 | 185 |         """
1678 | 1019 | 262 | 186 |         ディレクトリリスト化の全処理を実行する。
1679 | 1020 | 263 | 187 |         """
1680 | 1021 | 264 | 188 |         print(f"処理を開始します: {self.root_path}")
1681 | 1022 | 265 | 189 |         try:
1682 | 1023 | 266 | 190 |             # 1. ディレクトリ構造を生成
1683 | 1024 | 267 | 191 |             tree_structure = self.generate_tree_structure()
1684 | 1025 | 268 | 192 |
1685 | 1026 | 269 | 193 |             # 2. ファイル内容を生成
1686 | 1027 | 270 | 194 |             file_contents = self.generate_file_contents()
1687 | 1028 | 271 | 195 |
1688 | 1029 | 272 | 196 |             # 3. ファイルに書き込み
1689 | 1030 | 273 | 197 |             self.write_to_file(tree_structure, file_contents)
1690 | 1031 | 274 | 198 |
1691 | 1032 | 275 | 199 |             print("処理が正常に完了しました。")
1692 | 1033 | 276 | 200 |
1693 | 1034 | 277 | 201 |         except Exception as e:
1694 | 1035 | 278 | 202 |             # run の中で予期せぬエラーが起きた場合 (各メソッド内で捕捉されなかった場合など)
1695 | 1036 | 279 | 203 |             print(f"\n処理中にエラーが発生しました: {e}", file=sys.stderr)
1696 | 1037 | 280 | 204 |             # ここでプログラムを終了させるか、呼び出し元にエラーを伝えるかは設計による
1697 | 1038 | 281 | 205 |             # 今回は呼び出し元 (mainブロック) で最終的なエラーハンドリングを行う想定
1698 | 1039 | 282 | 206 |             raise # 捕捉したエラーを再度送出する
1699 | 1040 | 283 | 207 |
1700 | 1041 | 284 | 208 |
1701 | 1042 | 285 | 209 | def test_should_ignore(lister: DirectoryLister) -> None:
1702 | 1043 | 286 | 210 |     # テスト用のPathオブジェクトを作成 (Windows/Mac/Linuxで互換性のある書き方)
1703 | 1044 | 287 | 211 |     test_path_git = Path(".git") / "config" # 相対パスで作成
1704 | 1045 | 288 | 212 |     test_path_pycache = Path("my_module") / "__pycache__" / "cache_file.pyc"
1705 | 1046 | 289 | 213 |     test_path_dsstore = Path("images") / ".DS_Store"
1706 | 1047 | 290 | 214 |     test_path_log = Path("logs") / "app.log"
1707 | 1048 | 291 | 215 |     test_path_normal_file = Path("src") / "main.py"
1708 | 1049 | 292 | 216 |     test_path_normal_dir = Path("data")
1709 | 1050 | 293 | 217 |     test_path_root_ignored_file = Path(".env")
1710 | 1051 | 294 | 218 |     test_path_image = Path("assets") / "logo.png"
1711 | 1052 | 295 | 219 |
1712 | 1053 | 296 | 220 |     print("-" * 20)
1713 | 1054 | 297 | 221 |     print("無視判定テスト:")
1714 | 1055 | 298 | 222 |     print(f"'{test_path_git}' は無視対象? -> {lister._should_ignore(test_path_git)}") # Trueのはず
1715 | 1056 | 299 | 223 |     print(f"'{test_path_pycache}' は無視対象? -> {lister._should_ignore(test_path_pycache)}") # Trueのはず
1716 | 1057 | 300 | 224 |     print(f"'{test_path_dsstore}' は無視対象? -> {lister._should_ignore(test_path_dsstore)}") # Trueのはず
1717 | 1058 | 301 | 225 |     print(f"'{test_path_log}' は無視対象? -> {lister._should_ignore(test_path_log)}") # Trueのはず
1718 | 1059 | 302 | 226 |     print(f"'{test_path_normal_file}' は無視対象? -> {lister._should_ignore(test_path_normal_file)}") # Falseのはず
1719 | 1060 | 303 | 227 |     print(f"'{test_path_normal_dir}' は無視対象? -> {lister._should_ignore(test_path_normal_dir)}") # Falseのはず
1720 | 1061 | 304 | 228 |     print(f"'{test_path_root_ignored_file}' は無視対象? -> {lister._should_ignore(test_path_root_ignored_file)}") # Trueのはず
1721 | 1062 | 305 | 229 |     print(f"'{test_path_image}' は無視対象? -> {lister._should_ignore(test_path_image)}") # Trueのはず
1722 | 1063 | 306 | 230 |     print("-" * 20)
1723 | 1064 | 307 | 231 |
1724 | 1065 | 308 | 232 |
1725 | 1066 | 309 | 233 | def test_get_sorted_items() -> None:
1726 | 1067 | 310 | 234 |     # テスト用のディレクトリとファイルを作成
1727 | 1068 | 311 | 235 |     test_base_dir = Path("./temp_lister_test")
1728 | 1069 | 312 | 236 |     test_base_dir.mkdir(exist_ok=True)
1729 | 1070 | 313 | 237 |     (test_base_dir / "dir_a").mkdir(exist_ok=True)
1730 | 1071 | 314 | 238 |     (test_base_dir / "file_z.txt").touch(exist_ok=True)
1731 | 1072 | 315 | 239 |     (test_base_dir / "File_B.py").touch(exist_ok=True)
1732 | 1073 | 316 | 240 |     (test_base_dir / "dir_c").mkdir(exist_ok=True)
1733 | 1074 | 317 | 241 |     (test_base_dir / ".env").touch(exist_ok=True) # 無視されるファイル
1734 | 1075 | 318 | 242 |     (test_base_dir / "image.png").touch(exist_ok=True) # 無視される拡張子
1735 | 1076 | 319 | 243 |     (test_base_dir / ".git").mkdir(exist_ok=True) # 無視されるディレクトリ
1736 | 1077 | 320 | 244 |
1737 | 1078 | 321 | 245 |     # Listerインスタンスを作成 (テストディレクトリを対象)
1738 | 1079 | 322 | 246 |     lister = DirectoryLister(
1739 | 1080 | 323 | 247 |         Path(test_base_dir),
1740 | 1081 | 324 | 248 |         Path("./output.txt"),
1741 | 1082 | 325 | 249 |         config=get_config(Path('./settings.yml'))
1742 | 1083 | 326 | 250 |     )
1743 | 1084 | 327 | 251 |
1744 | 1085 | 328 | 252 |     print(f"\n'{test_base_dir}' 内のソート済みアイテム:")
1745 | 1086 | 329 | 253 |     sorted_items = lister._get_sorted_items(test_base_dir)
1746 | 1087 | 330 | 254 |     if not sorted_items:
1747 | 1088 | 331 | 255 |         print("  (アイテムが見つからないか、アクセスエラー)")
1748 | 1089 | 332 | 256 |     for item in sorted_items:
1749 | 1090 | 333 | 257 |         item_type = "Dir " if item.is_dir() else "File"
1750 | 1091 | 334 | 258 |         print(f"  {item_type}: {item.name}")
1751 | 1092 | 335 | 259 |
1752 | 1093 | 336 | 260 |     # 期待される出力順序の確認 (手動)
1753 | 1094 | 337 | 261 |     # dir_a, dir_c, File_B.py, file_z.txt の順になるはず
1754 | 1095 | 338 | 262 |
1755 | 1096 | 339 | 263 |
1756 | 1097 | 340 | 264 | def main() -> None:
1757 | 1098 | 341 | 265 |     # インスタンス化
1758 | 1099 | 342 | 266 |     lister = DirectoryLister(
1759 | 1100 | 343 | 267 |         directory_path=Path('./'),
1760 | 1101 | 344 | 268 |         output_file=Path('text.txt'),
1761 | 1102 | 345 | 269 |         config=get_config(Path('./settings.yml'))
1762 | 1103 | 346 | 270 |     )
1763 | 1104 | 347 | 271 |
1764 | 1105 | 348 | 272 |     structure = lister.generate_tree_structure()
1765 | 1106 | 349 | 273 |     print("-"*30)
1766 | 1107 | 350 | 274 |     print(structure)
1767 | 1108 | 351 | 275 |
1768 | 1109 | 352 | 276 |     # ディレクトリリスト化を実行
1769 | 1110 | 353 | 277 |     lister.run()
1770 | 1111 | 354 | 278 |
1771 | 1112 | 355 | 279 |     # for item in a:
1772 | 1113 | 356 | 280 |     #     print(item)
1773 | 1114 | 357 | 281 |
1774 | 1115 | 358 | 282 |     # test_should_ignore(lister)
1775 | 1116 | 359 | 283 |     # test_get_sorted_items()
1776 | 1117 | 360 | 284 |
1777 | 1118 | 361 | 285 |
1778 | 1119 | 362 | 286 | if __name__ == "__main__":
1779 | 1120 | 363 | 287 |     main()
1780 | 1121 | 364 | --------------------------------------------------------------------------------
1781 | 1122 | 365 |
1782 | 1123 | 366 |
1783 | 1124 | 367 | /entrypoint.py:
1784 | 1125 | 368 | --------------------------------------------------------------------------------
1785 | 1126 | 369 |   1 | from pathlib import Path
1786 | 1127 | 370 |   2 |
1787 | 1128 | 371 |   3 | from config import get_config, Config
1788 | 1129 | 372 |   4 |
1789 | 1130 | 373 |   5 | # 無視するディレクトリやファイル、拡張子の設定を取得
1790 | 1131 | 374 |   6 | settings_yaml_path = Path('./settings.yml')
1791 | 1132 | 375 |   7 | CONFIG = get_config(settings_yaml_path)
1792 | 1133 | 376 |   8 |
1793 | 1134 | 377 |   9 |
1794 | 1135 | 378 |  10 | def should_ignore(path: Path, config: Config=CONFIG) -> bool:
1795 | 1136 | 379 |  11 |     """指定されたパスが無視対象かどうかを判定する"""
1796 | 1137 | 380 |  12 |     # ディレクトリ名で無視
1797 | 1138 | 381 |  13 |
1798 | 1139 | 382 |  14 |     if any(part in getattr(config, "ignore_dirs") for part in path.parts):
1799 | 1140 | 383 |  15 |         return True
1800 | 1141 | 384 |  16 |     # ファイル名で無視
1801 | 1142 | 385 |  17 |     if path.name in getattr(config, "ignore_files"):
1802 | 1143 | 386 |  18 |         return True
1803 | 1144 | 387 |  19 |     # 拡張子で無視
1804 | 1145 | 388 |  20 |     if path.suffix.lower() in config.ignore_extensions.all_extensions():
1805 | 1146 | 389 |  21 |         return True
1806 | 1147 | 390 |  22 |     return False
1807 | 1148 | 391 |  23 |
1808 | 1149 | 392 |  24 |
1809 | 1150 | 393 |  25 | def generate_tree(start_path: Path, prefix: str = '', is_last: bool = True) -> str:
1810 | 1151 | 394 |  26 |     """ディレクトリ構造をtree形式で生成する再帰関数"""
1811 | 1152 | 395 |  27 |     structure = ""
1812 | 1153 | 396 |  28 |     # 無視対象のディレクトリ/ファイルは処理しない
1813 | 1154 | 397 |  29 |     if should_ignore(start_path):
1814 | 1155 | 398 |  30 |         return ""
1815 | 1156 | 399 |  31 |
1816 | 1157 | 400 |  32 |     connector = '└── ' if is_last else '├── '
1817 | 1158 | 401 |  33 |     structure += f"{prefix}{connector}{start_path.name}\n"
1818 | 1159 | 402 |  34 |
1819 | 1160 | 403 |  35 |     if start_path.is_dir():
1820 | 1161 | 404 |  36 |         new_prefix = prefix + ('    ' if is_last else '│   ')
1821 | 1162 | 405 |  37 |         # ディレクトリ内のアイテムを取得し、無視対象を除外してソート
1822 | 1163 | 406 |  38 |         items = sorted(
1823 | 1164 | 407 |  39 |             [item for item in start_path.iterdir() if not should_ignore(item)],
1824 | 1165 | 408 |  40 |             key=lambda x: (x.is_file(), x.name.lower()) # ディレクトリを先に、次にファイル名でソート
1825 | 1166 | 409 |  41 |         )
1826 | 1167 | 410 |  42 |         for i, item in enumerate(items):
1827 | 1168 | 411 |  43 |             is_last_item = (i == len(items) - 1)
1828 | 1169 | 412 |  44 |             structure += generate_tree(item, new_prefix, is_last_item)
1829 | 1170 | 413 |  45 |
1830 | 1171 | 414 |  46 |     return structure
1831 | 1172 | 415 |  47 |
1832 | 1173 | 416 |  48 |
1833 | 1174 | 417 |  49 | def get_file_contents(root_path: Path) -> str:
1834 | 1175 | 418 |  50 |     """指定されたディレクトリ以下の全ファイルのパスと内容を行番号付きで取得する"""
1835 | 1176 | 419 |  51 |     contents = ""
1836 | 1177 | 420 |  52 |     separator = "-" * 80 + "\n"
1837 | 1178 | 421 |  53 |     processed_files_count = 0
1838 | 1179 | 422 |  54 |
1839 | 1180 | 423 |  55 |     # rglob で再帰的にファイルを取得し、パスでソート
1840 | 1181 | 424 |  56 |     all_paths = sorted([p for p in root_path.rglob('*')])
1841 | 1182 | 425 |  57 |
1842 | 1183 | 426 |  58 |     for item in all_paths:
1843 | 1184 | 427 |  59 |         # 無視対象をスキップ
1844 | 1185 | 428 |  60 |         if should_ignore(item):
1845 | 1186 | 429 |  61 |             continue
1846 | 1187 | 430 |  62 |
1847 | 1188 | 431 |  63 |         if item.is_file():
1848 | 1189 | 432 |  64 |             processed_files_count += 1
1849 | 1190 | 433 |  65 |             # ルートパスからの相対パスを取得し、先頭に / を追加
1850 | 1191 | 434 |  66 |             try:
1851 | 1192 | 435 |  67 |                 relative_path = item.relative_to(root_path)
1852 | 1193 | 436 |  68 |                 contents += f"\n/{relative_path}:\n"
1853 | 1194 | 437 |  69 |             except ValueError:
1854 | 1195 | 438 |  70 |                 # root_path自身がファイルの場合など
1855 | 1196 | 439 |  71 |                 contents += f"\n/{item.name}:\n"
1856 | 1197 | 440 |  72 |
1857 | 1198 | 441 |  73 |             contents += separator
1858 | 1199 | 442 |  74 |             try:
1859 | 1200 | 443 |  75 |                 # さまざまなエンコーディングに対応し、エラーは無視
1860 | 1201 | 444 |  76 |                 with open(item, 'r', encoding='utf-8', errors='ignore') as f:
1861 | 1202 | 445 |  77 |                     lines = f.readlines()
1862 | 1203 | 446 |  78 |                     if not lines:
1863 | 1204 | 447 |  79 |                         contents += " [空ファイル]\n"
1864 | 1205 | 448 |  80 |                     else:
1865 | 1206 | 449 |  81 |                         # 行番号の桁数を計算
1866 | 1207 | 450 |  82 |                         max_digits = len(str(len(lines)))
1867 | 1208 | 451 |  83 |                         for i, line in enumerate(lines):
1868 | 1209 | 452 |  84 |                             # 行番号を右寄せでフォーマット
1869 | 1210 | 453 |  85 |                             line_num_str = str(i + 1).rjust(max_digits)
1870 | 1211 | 454 |  86 |                             # 末尾の改行は維持しつつ、余分な空白は削除
1871 | 1212 | 455 |  87 |                             contents += f"{line_num_str} | {line.rstrip()}\n"
1872 | 1213 | 456 |  88 |             except Exception as e:
1873 | 1214 | 457 |  89 |                 contents += f" [エラー] ファイル読み込み中にエラーが発生しました: {e}\n"
1874 | 1215 | 458 |  90 |             contents += separator
1875 | 1216 | 459 |  91 |
1876 | 1217 | 460 |  92 |     if processed_files_count == 0:
1877 | 1218 | 461 |  93 |         contents += "\n[指定されたディレクトリ内に処理対象ファイルが見つかりませんでした]\n"
1878 | 1219 | 462 |  94 |
1879 | 1220 | 463 |  95 |     return contents
1880 | 1221 | 464 |  96 |
1881 | 1222 | 465 |  97 | def generate_directory_listing(directory_path: str, output_file: str) -> None:
1882 | 1223 | 466 |  98 |     """ディレクトリ構造とファイル内容を指定ファイルに出力する"""
1883 | 1224 | 467 |  99 |     start_path = Path(directory_path).resolve() # 絶対パスに変換
1884 | 1225 | 468 | 100 |     if not start_path.is_dir():
1885 | 1226 | 469 | 101 |         print(f"エラー: '{directory_path}' は有効なディレクトリではありません。")
1886 | 1227 | 470 | 102 |         return
1887 | 1228 | 471 | 103 |
1888 | 1229 | 472 | 104 |     print(f"処理を開始します: {start_path}")
1889 | 1230 | 473 | 105 |     print(f"出力ファイル: {output_file}")
1890 | 1231 | 474 | 106 |
1891 | 1232 | 475 | 107 |     # ディレクトリ構造の取得 (tree形式)
1892 | 1233 | 476 | 108 |     print("ディレクトリ構造を生成中...")
1893 | 1234 | 477 | 109 |     # ルートディレクトリ自体も表示するために少し調整
1894 | 1235 | 478 | 110 |     structure = f"{start_path.name}\n"
1895 | 1236 | 479 | 111 |     items = sorted(
1896 | 1237 | 480 | 112 |         [item for item in start_path.iterdir() if not should_ignore(item)],
1897 | 1238 | 481 | 113 |          key=lambda x: (x.is_file(), x.name.lower())
1898 | 1239 | 482 | 114 |     )
1899 | 1240 | 483 | 115 |     for i, item in enumerate(items):
1900 | 1241 | 484 | 116 |         is_last_item = (i == len(items) - 1)
1901 | 1242 | 485 | 117 |         structure += generate_tree(item, '', is_last_item)
1902 | 1243 | 486 | 118 |     print("ディレクトリ構造の生成完了。")
1903 | 1244 | 487 | 119 |
1904 | 1245 | 488 | 120 |     # ファイル内容の取得
1905 | 1246 | 489 | 121 |     print("ファイル内容を取得中...")
1906 | 1247 | 490 | 122 |     file_contents_data = get_file_contents(start_path)
1907 | 1248 | 491 | 123 |     print("ファイル内容の取得完了。")
1908 | 1249 | 492 | 124 |
1909 | 1250 | 493 | 125 |     # ファイルへの書き込み
1910 | 1251 | 494 | 126 |     print("ファイルに書き込み中...")
1911 | 1252 | 495 | 127 |     try:
1912 | 1253 | 496 | 128 |         # 出力ファイルのディレクトリが存在しない場合は作成
1913 | 1254 | 497 | 129 |         output_path = Path(output_file)
1914 | 1255 | 498 | 130 |         output_path.parent.mkdir(parents=True, exist_ok=True)
1915 | 1256 | 499 | 131 |
1916 | 1257 | 500 | 132 |         with open(output_path, 'w', encoding='utf-8') as f:
1917 | 1258 | 501 | 133 |             f.write(structure)
1918 | 1259 | 502 | 134 |             f.write("\n\n") # treeと内容の間に空行を入れる
1919 | 1260 | 503 | 135 |             f.write(file_contents_data)
1920 | 1261 | 504 | 136 |         print(f"ディレクトリリストが '{output_path.resolve()}' に出力されました。")
1921 | 1262 | 505 | 137 |     except IOError as e:
1922 | 1263 | 506 | 138 |         print(f"エラー: ファイル '{output_file}' に書き込めませんでした: {e}")
1923 | 1264 | 507 | 139 |     except Exception as e:
1924 | 1265 | 508 | 140 |         print(f"予期せぬエラーが発生しました: {e}")
1925 | 1266 | 509 | 141 |
1926 | 1267 | 510 | 142 |
1927 | 1268 | 511 | 143 | def main() -> None:
1928 | 1269 | 512 | 144 |     directory_path = "../"
1929 | 1270 | 513 | 145 |     start_path = Path(directory_path).resolve() # 絶対パスに変換
1930 | 1271 | 514 | 146 |     start_path = Path(directory_path).resolve().resolve() # 絶対パスに変換
1931 | 1272 | 515 | 147 |
1932 | 1273 | 516 | 148 |     generate_directory_listing(directory_path, "./entrypoint.txt")
1933 | 1274 | 517 | 149 |
1934 | 1275 | 518 | 150 |
1935 | 1276 | 519 | 151 | # --- コマンドライン引数の処理とメイン実行部分 ---
1936 | 1277 | 520 | 152 | if __name__ == "__main__":
1937 | 1278 | 521 | 153 |     main()
1938 | 1279 | 522 | --------------------------------------------------------------------------------
1939 | 1280 | 523 |
1940 | 1281 | 524 |
1941 | 1282 | 525 | /pyproject.toml:
1942 | 1283 | 526 | --------------------------------------------------------------------------------
1943 | 1284 | 527 |  1 | [project]
1944 | 1285 | 528 |  2 | name = "repository-reader"
1945 | 1286 | 529 |  3 | version = "0.1.0"
1946 | 1287 | 530 |  4 | description = ""
1947 | 1288 | 531 |  5 | authors = [
1948 | 1289 | 532 |  6 |     {name = "Your Name",email = "you@example.com"}
1949 | 1290 | 533 |  7 | ]
1950 | 1291 | 534 |  8 | readme = "README.md"
1951 | 1292 | 535 |  9 | requires-python = ">=3.11"
1952 | 1293 | 536 | 10 | dependencies = [
1953 | 1294 | 537 | 11 |     "pyyaml (>=6.0.2,<7.0.0)",
1954 | 1295 | 538 | 12 |     "pydantic (>=2.11.3,<3.0.0)"
1955 | 1296 | 539 | 13 | ]
1956 | 1297 | 540 | 14 |
1957 | 1298 | 541 | 15 |
1958 | 1299 | 542 | 16 | [build-system]
1959 | 1300 | 543 | 17 | requires = ["poetry-core>=2.0.0,<3.0.0"]
1960 | 1301 | 544 | 18 | build-backend = "poetry.core.masonry.api"
1961 | 1302 | 545 | --------------------------------------------------------------------------------
1962 | 1303 | 546 |
1963 | 1304 | 547 |
1964 | 1305 | 548 | /settings.yml:
1965 | 1306 | 549 | --------------------------------------------------------------------------------
1966 | 1307 | 550 |  1 | ignore_dirs:
1967 | 1308 | 551 |  2 |   - ".git"
1968 | 1309 | 552 |  3 |   - "__pycache__"
1969 | 1310 | 553 |  4 |   - ".venv"
1970 | 1311 | 554 |  5 |   - "node_modules"
1971 | 1312 | 555 |  6 |   - ".vscode"
1972 | 1313 | 556 |  7 |   - ".idea"
1973 | 1314 | 557 |  8 |   - "build"
1974 | 1315 | 558 |  9 |   - "dist"
1975 | 1316 | 559 | 10 |   - "*.egg_info"
1976 | 1317 | 560 | 11 |   - ".mypy_cache"
1977 | 1318 | 561 | 12 | ignore_files:
1978 | 1319 | 562 | 13 |   - ".DS_Store"
1979 | 1320 | 563 | 14 |   - ".env"
1980 | 1321 | 564 | 15 |   - "thumbs.db"
1981 | 1322 | 565 | 16 | ignore_extensions:
1982 | 1323 | 566 | 17 |   images:
1983 | 1324 | 567 | 18 |     - '.png'
1984 | 1325 | 568 | 19 |     - '.jpg'
1985 | 1326 | 569 | 20 |     - '.jpeg'
1986 | 1327 | 570 | 21 |     - '.gif'
1987 | 1328 | 571 | 22 |     - '.bmp'
1988 | 1329 | 572 | 23 |     - '.tiff'
1989 | 1330 | 573 | 24 |     - '.webp'
1990 | 1331 | 574 | 25 |     - '.svg'
1991 | 1332 | 575 | 26 |     - '.ico'
1992 | 1333 | 576 | 27 |   videos:
1993 | 1334 | 577 | 28 |     - '.mp4'
1994 | 1335 | 578 | 29 |     - '.mov'
1995 | 1336 | 579 | 30 |     - '.avi'
1996 | 1337 | 580 | 31 |     - '.wmv'
1997 | 1338 | 581 | 32 |     - '.mp3'
1998 | 1339 | 582 | 33 |     - '.wav'
1999 | 1340 | 583 | 34 |     - '.ogg'
2000 | 1341 | 584 | 35 |   compressed:
2001 | 1342 | 585 | 36 |     - '.zip'
2002 | 1343 | 586 | 37 |     - '.gz'
2003 | 1344 | 587 | 38 |     - '.tar'
2004 | 1345 | 588 | 39 |     - '.rar'
2005 | 1346 | 589 | 40 |     - '.7z'
2006 | 1347 | 590 | 41 |   binaries:
2007 | 1348 | 591 | 42 |     - '.pyc'
2008 | 1349 | 592 | 43 |     - '.pyo'
2009 | 1350 | 593 | 44 |     - '.exe'
2010 | 1351 | 594 | 45 |     - '.dll'
2011 | 1352 | 595 | 46 |     - '.so'
2012 | 1353 | 596 | 47 |     - '.o'
2013 | 1354 | 597 | 48 |     - '.a'
2014 | 1355 | 598 | 49 |     - '.lib'
2015 | 1356 | 599 | 50 |   documents:
2016 | 1357 | 600 | 51 |     - '.pdf'
2017 | 1358 | 601 | 52 |     - '.doc'
2018 | 1359 | 602 | 53 |     - '.docx'
2019 | 1360 | 603 | 54 |     - '.xls'
2020 | 1361 | 604 | 55 |     - '.xlsx'
2021 | 1362 | 605 | 56 |     - '.ppt'
2022 | 1363 | 606 | 57 |     - '.pptx'
2023 | 1364 | 607 | 58 |   others:
2024 | 1365 | 608 | 59 |     - '.lock'
2025 | 1366 | 609 | 60 |     - '.log'
2026 | 1367 | 610 | 61 |     - '.sqlite'
2027 | 1368 | 611 | 62 |     - '.db'
2028 | 1369 | 612 | 63 |
2029 | 1370 | 613 | --------------------------------------------------------------------------------
2030 | 1371 | 614 |
2031 | 1372 | 615 |
2032 | 1373 | 616 | /temp_lister_test/File_B.py:
2033 | 1374 | 617 | --------------------------------------------------------------------------------
2034 | 1375 | 618 |  [空ファイル]
2035 | 1376 | 619 | --------------------------------------------------------------------------------
2036 | 1377 | 620 |
2037 | 1378 | 621 |
2038 | 1379 | 622 | /temp_lister_test/file_z.txt:
2039 | 1380 | 623 | --------------------------------------------------------------------------------
2040 | 1381 | 624 |  [空ファイル]
2041 | 1382 | 625 | --------------------------------------------------------------------------------
2042 | 1383 | --------------------------------------------------------------------------------
2043 | 1384 |
2044 | 1385 | /project_module/src/project_module/__init__.py:
2045 | 1386 | --------------------------------------------------------------------------------
2046 | 1387 |  [空ファイル]
2047 | 1388 | --------------------------------------------------------------------------------
2048 | --------------------------------------------------------------------------------
2049 | 
2050 | /experimentation/pyproject.toml:
2051 | --------------------------------------------------------------------------------
2052 |  1 | [project]
2053 |  2 | name = "repository-reader"
2054 |  3 | version = "0.1.0"
2055 |  4 | description = ""
2056 |  5 | authors = [
2057 |  6 |     {name = "Your Name",email = "you@example.com"}
2058 |  7 | ]
2059 |  8 | readme = "README.md"
2060 |  9 | requires-python = ">=3.11"
2061 | 10 | dependencies = [
2062 | 11 |     "pyyaml (>=6.0.2,<7.0.0)",
2063 | 12 |     "pydantic (>=2.11.3,<3.0.0)"
2064 | 13 | ]
2065 | 14 |
2066 | 15 |
2067 | 16 | [build-system]
2068 | 17 | requires = ["poetry-core>=2.0.0,<3.0.0"]
2069 | 18 | build-backend = "poetry.core.masonry.api"
2070 | --------------------------------------------------------------------------------
2071 | 
2072 | /experimentation/settings.yml:
2073 | --------------------------------------------------------------------------------
2074 |  1 | ignore_dirs:
2075 |  2 |   - ".git"
2076 |  3 |   - "__pycache__"
2077 |  4 |   - ".venv"
2078 |  5 |   - "node_modules"
2079 |  6 |   - ".vscode"
2080 |  7 |   - ".idea"
2081 |  8 |   - "build"
2082 |  9 |   - "dist"
2083 | 10 |   - "*.egg_info"
2084 | 11 |   - ".mypy_cache"
2085 | 12 | ignore_files:
2086 | 13 |   - ".DS_Store"
2087 | 14 |   - ".env"
2088 | 15 |   - "thumbs.db"
2089 | 16 | ignore_extensions:
2090 | 17 |   images:
2091 | 18 |     - '.png'
2092 | 19 |     - '.jpg'
2093 | 20 |     - '.jpeg'
2094 | 21 |     - '.gif'
2095 | 22 |     - '.bmp'
2096 | 23 |     - '.tiff'
2097 | 24 |     - '.webp'
2098 | 25 |     - '.svg'
2099 | 26 |     - '.ico'
2100 | 27 |   videos:
2101 | 28 |     - '.mp4'
2102 | 29 |     - '.mov'
2103 | 30 |     - '.avi'
2104 | 31 |     - '.wmv'
2105 | 32 |     - '.mp3'
2106 | 33 |     - '.wav'
2107 | 34 |     - '.ogg'
2108 | 35 |   compressed:
2109 | 36 |     - '.zip'
2110 | 37 |     - '.gz'
2111 | 38 |     - '.tar'
2112 | 39 |     - '.rar'
2113 | 40 |     - '.7z'
2114 | 41 |   binaries:
2115 | 42 |     - '.pyc'
2116 | 43 |     - '.pyo'
2117 | 44 |     - '.exe'
2118 | 45 |     - '.dll'
2119 | 46 |     - '.so'
2120 | 47 |     - '.o'
2121 | 48 |     - '.a'
2122 | 49 |     - '.lib'
2123 | 50 |   documents:
2124 | 51 |     - '.pdf'
2125 | 52 |     - '.doc'
2126 | 53 |     - '.docx'
2127 | 54 |     - '.xls'
2128 | 55 |     - '.xlsx'
2129 | 56 |     - '.ppt'
2130 | 57 |     - '.pptx'
2131 | 58 |   others:
2132 | 59 |     - '.lock'
2133 | 60 |     - '.log'
2134 | 61 |     - '.sqlite'
2135 | 62 |     - '.db'
2136 | 63 |
2137 | --------------------------------------------------------------------------------
2138 | 
2139 | /experimentation/temp_lister_test/File_B.py:
2140 | --------------------------------------------------------------------------------
2141 |  [空ファイル]
2142 | --------------------------------------------------------------------------------
2143 | 
2144 | /experimentation/temp_lister_test/file_z.txt:
2145 | --------------------------------------------------------------------------------
2146 |  [空ファイル]
2147 | --------------------------------------------------------------------------------
2148 | 
2149 | /experimentation/text.txt:
2150 | --------------------------------------------------------------------------------
2151 |   1 | --- ディレクトリ構造 ---
2152 |   2 | experimentation├── temp_lister_test
2153 |   3 | │   ├── dir_a
2154 |   4 | │   ├── dir_c
2155 |   5 | │   ├── File_B.py
2156 |   6 | │   └── file_z.txt
2157 |   7 | ├── config.py
2158 |   8 | ├── directory_lister.py
2159 |   9 | ├── entrypoint.py
2160 |  10 | ├── pyproject.toml
2161 |  11 | └── settings.yml
2162 |  12 |
2163 |  13 |
2164 |  14 | --- ファイル内容 ---
2165 |  15 |
2166 |  16 |
2167 |  17 | /config.py:
2168 |  18 | --------------------------------------------------------------------------------
2169 |  19 |  1 | import yaml
2170 |  20 |  2 | from pydantic import BaseModel
2171 |  21 |  3 | from typing import List
2172 |  22 |  4 | from pathlib import Path
2173 |  23 |  5 |
2174 |  24 |  6 | class IgnoreExtensionsConfig(BaseModel):
2175 |  25 |  7 |     images: List[str] | None
2176 |  26 |  8 |     videos: List[str] | None
2177 |  27 |  9 |     compressed: List[str] | None
2178 |  28 | 10 |     binaries: List[str] | None
2179 |  29 | 11 |     documents: List[str] | None
2180 |  30 | 12 |     others: List[str] | None
2181 |  31 | 13 |
2182 |  32 | 14 |     def all_extensions(self) -> List[str]:
2183 |  33 | 15 |         """全ての拡張子を取得する"""
2184 |  34 | 16 |         all_exts = []
2185 |  35 | 17 |         for attr in self.__dict__.values():
2186 |  36 | 18 |             if isinstance(attr, list):
2187 |  37 | 19 |                 all_exts.extend(attr)
2188 |  38 | 20 |         return all_exts
2189 |  39 | 21 |
2190 |  40 | 22 |
2191 |  41 | 23 |
2192 |  42 | 24 | class Config(BaseModel):
2193 |  43 | 25 |     ignore_dirs: List[str] | None
2194 |  44 | 26 |     ignore_files: List[str] | None
2195 |  45 | 27 |     ignore_extensions: IgnoreExtensionsConfig | None
2196 |  46 | 28 |
2197 |  47 | 29 |
2198 |  48 | 30 | def get_config(settings_yaml_path: Path)->Config:
2199 |  49 | 31 |     with open(settings_yaml_path, 'rb') as f:
2200 |  50 | 32 |         yml = yaml.safe_load(f)
2201 |  51 | 33 |
2202 |  52 | 34 |     return Config.model_validate(yml)
2203 |  53 | 35 |
2204 |  54 | 36 |
2205 |  55 | 37 | def main() -> None:
2206 |  56 | 38 |     settings_yaml_path = Path('./settings.yml')
2207 |  57 | 39 |     config = get_config(settings_yaml_path)
2208 |  58 | 40 |
2209 |  59 | 41 |     print()
2210 |  60 | 42 |     print(f"{getattr(config, 'ignore_dirs')=}")
2211 |  61 | 43 |     print()
2212 |  62 | 44 |     print(f"{getattr(config, 'ignore_extensions')=}")
2213 |  63 | 45 |     print()
2214 |  64 | 46 |     print(f"{getattr(config.ignore_extensions, 'images')=}")
2215 |  65 | 47 |     print()
2216 |  66 | 48 |     print(config.ignore_extensions.all_extensions())
2217 |  67 | 49 |     print()
2218 |  68 | 50 |
2219 |  69 | 51 |
2220 |  70 | 52 | if __name__ == "__main__":
2221 |  71 | 53 |     main()
2222 |  72 | --------------------------------------------------------------------------------
2223 |  73 |
2224 |  74 |
2225 |  75 | /directory_lister.py:
2226 |  76 | --------------------------------------------------------------------------------
2227 |  77 |   1 | from pathlib import Path
2228 |  78 |   2 | from typing import List
2229 |  79 |   3 | from config import get_config, Config
2230 |  80 |   4 |
2231 |  81 |   5 | import os
2232 |  82 |   6 | import sys
2233 |  83 |   7 |
2234 |  84 |   8 |
2235 |  85 |   9 | class DirectoryLister:
2236 |  86 |  10 |     def __init__(
2237 |  87 |  11 |             self,
2238 |  88 |  12 |             directory_path: Path,
2239 |  89 |  13 |             output_file: Path,
2240 |  90 |  14 |             config: Config
2241 |  91 |  15 |     ):
2242 |  92 |  16 |         self.root_path = directory_path.resolve() # 絶対パスに変換
2243 |  93 |  17 |         self.output_file = output_file
2244 |  94 |  18 |         self.config = config
2245 |  95 |  19 |
2246 |  96 |  20 |         if not self.root_path.is_dir():
2247 |  97 |  21 |             raise ValueError(f"{self.root_path} is not a directory.")
2248 |  98 |  22 |
2249 |  99 |  23 |         self.ignore_dirs = getattr(self.config, "ignore_dirs")
2250 | 100 |  24 |         self.ignore_files = getattr(self.config, "ignore_files")
2251 | 101 |  25 |         self.ignore_extensions = getattr(self.config.ignore_extensions, "all_extensions")()
2252 | 102 |  26 |         self.ignore_files.append(str(output_file)) # 過去に出力したテキストを無視する必要がある
2253 | 103 |  27 |
2254 | 104 |  28 |
2255 | 105 |  29 |     def _should_ignore(self, path: Path) -> bool:
2256 | 106 |  30 |         """指定されたパスが無視対象かどうかを判定する"""
2257 | 107 |  31 |         if any(part in self.ignore_dirs for part in path.parts): return True # ディレクトリ名で無視
2258 | 108 |  32 |         if path.name in self.ignore_files: return True # ファイル名で無視
2259 | 109 |  33 |         if path.suffix.lower() in self.ignore_extensions: return True # 拡張子で無視
2260 | 110 |  34 |
2261 | 111 |  35 |         return False
2262 | 112 |  36 |
2263 | 113 |  37 |
2264 | 114 |  38 |     def _get_sorted_items(self, directory: Path) -> List[Path]:
2265 | 115 |  39 |         """指定されたディレクトリ内のアイテムを無視対象を除外してソートする. 内部メソッド"""
2266 | 116 |  40 |         # TODO: パーミッションエラーやディレクトリを見つけられなかった時のエラーハンドリングを追加する
2267 | 117 |  41 |
2268 | 118 |  42 |         # ディレクトリ内のアイテムを取得し、無視対象を除外してソート
2269 | 119 |  43 |         filtered_items = [item for item in directory.iterdir() if not self._should_ignore(item)]
2270 | 120 |  44 |         items = sorted(
2271 | 121 |  45 |             filtered_items,
2272 | 122 |  46 |             key=lambda x: (x.is_file(), x.name.lower()) # ディレクトリを先に、次にファイル名でソート
2273 | 123 |  47 |         )
2274 | 124 |  48 |         return items
2275 | 125 |  49 |
2276 | 126 |  50 |
2277 | 127 |  51 |     def _generate_tree_recursive(
2278 | 128 |  52 |             self,
2279 | 129 |  53 |             current_path: Path,
2280 | 130 |  54 |             prefix: str = "",
2281 | 131 |  55 |             is_last: bool=True
2282 | 132 |  56 |     ) -> str:
2283 | 133 |  57 |         """ディレクトリ構造をtree形式で再帰的に生成する（内部メソッド）"""
2284 | 134 |  58 |         structure = ""
2285 | 135 |  59 |         connector = '└── ' if is_last else '├── '
2286 | 136 |  60 |
2287 | 137 |  61 |         try:
2288 | 138 |  62 |             structure += f"{prefix}{connector}{current_path.name}\n"
2289 | 139 |  63 |
2290 | 140 |  64 |             # ディレクトリの場合は再起的に呼び出す
2291 | 141 |  65 |             if current_path.is_dir():
2292 | 142 |  66 |                 new_prefix = prefix + ('    ' if is_last else '│   ')
2293 | 143 |  67 |                 # サブアイテムを取得する
2294 | 144 |  68 |                 items = self._get_sorted_items(current_path)
2295 | 145 |  69 |                 item_count = len(items)
2296 | 146 |  70 |
2297 | 147 |  71 |                 for i, item in enumerate(items):
2298 | 148 |  72 |                     is_last_item= (i == item_count - 1)
2299 | 149 |  73 |                     # 再帰的に呼び出す
2300 | 150 |  74 |                     structure += self._generate_tree_recursive(item, new_prefix, is_last_item)
2301 | 151 |  75 |
2302 | 152 |  76 |         except OSError as e:
2303 | 153 |  77 |             structure += f"{prefix}{connector}[エラー: {e.strerror} ({current_path.name})]\n"
2304 | 154 |  78 |         except Exception as e:
2305 | 155 |  79 |             structure += f"{prefix}{connector}[予期せぬエラー: {e} ({current_path.name})]\n"
2306 | 156 |  80 |
2307 | 157 |  81 |         return structure
2308 | 158 |  82 |
2309 | 159 |  83 |
2310 | 160 |  84 |     def generate_tree_structure(self)-> str:
2311 | 161 |  85 |         """ルートディレクトリから始まる全体のディレクt理構造の文字列を生成する"""
2312 | 162 |  86 |         structure = f"{self.root_path.name}"
2313 | 163 |  87 |
2314 | 164 |  88 |         # ルートディレクトリのアイテムを取得
2315 | 165 |  89 |         items = self._get_sorted_items(self.root_path)
2316 | 166 |  90 |
2317 | 167 |  91 |         # 各アイテムに対して再起的に処理をする
2318 | 168 |  92 |         num_items = len(items)
2319 | 169 |  93 |         for i, item in enumerate(items):
2320 | 170 |  94 |             is_last_item = (i == num_items - 1)
2321 | 171 |  95 |             structure += self._generate_tree_recursive(item, "", is_last_item) # prefixは空文字列で初期化
2322 | 172 |  96 |
2323 | 173 |  97 |         return structure
2324 | 174 |  98 |
2325 | 175 |  99 |
2326 | 176 | 100 |     def _format_file_content(self, file_path: Path) -> str:
2327 | 177 | 101 |         """単一のファイルのパスと内容を読み込み、整形して文字列で返す。 内部メソッド"""
2328 | 178 | 102 |
2329 | 179 | 103 |         content_str = "" # 結果の文字列
2330 | 180 | 104 |         separator = "-" * 80 + "\n" # 区切り線の定義
2331 | 181 | 105 |
2332 | 182 | 106 |         # 相対パスの取得
2333 | 183 | 107 |         relative_path = file_path.relative_to(self.root_path) # 相対パスを取得
2334 | 184 | 108 |         content_str += f"\n\n/{relative_path}:\n" # 相対パスを表示
2335 | 185 | 109 |
2336 | 186 | 110 |         content_str += separator
2337 | 187 | 111 |
2338 | 188 | 112 |         # ファイルの内容を読み込む
2339 | 189 | 113 |         try:
2340 | 190 | 114 |             with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
2341 | 191 | 115 |                 lines = f.readlines() # ファイルの全行をリストとして読み込む
2342 | 192 | 116 |
2343 | 193 | 117 |             if not lines: # 空ファイルの場合
2344 | 194 | 118 |                 content_str += " [空ファイル]\n"
2345 | 195 | 119 |             else:
2346 | 196 | 120 |                 max_digits = len(str(len(lines))) # 行番号の桁数を計算。仮に20行であればmax_digitsは2になる。
2347 | 197 | 121 |                 for i, line in enumerate(lines):
2348 | 198 | 122 |                     line_num_str = str(i+1).rjust(max_digits) # 行番号を右寄せで整形
2349 | 199 | 123 |                     content_str += f"{line_num_str} | {line.rstrip()}\n" # 行末の改行文字（rstrip()）を除去して、整形して追加
2350 | 200 | 124 |         except PermissionError:
2351 | 201 | 125 |             content_str += f" [エラー] ファイル '{file_path.name}' へのアクセス権がありません。\n"
2352 | 202 | 126 |         except OSError as e:
2353 | 203 | 127 |             content_str += f" [エラー] ファイル '{file_path.name}' 読み込み中にOSエラーが発生しました: {e.strerror}\n"
2354 | 204 | 128 |         except Exception as e:
2355 | 205 | 129 |             content_str += f" [エラー] ファイル '{file_path.name}' 読み込み中に予期せぬエラーが発生しました: {e}\n"
2356 | 206 | 130 |
2357 | 207 | 131 |         content_str += separator # 最後に区切り線を追加
2358 | 208 | 132 |         return content_str
2359 | 209 | 133 |
2360 | 210 | 134 |
2361 | 211 | 135 |     def generate_file_contents(self)->str:
2362 | 212 | 136 |         """全ファイルのパスと内容を行番号付きで取得する"""
2363 | 213 | 137 |         contents=""
2364 | 214 | 138 |
2365 | 215 | 139 |         files = [os.path.join(dirpath, f) for dirpath, _, filenames in os.walk(self.root_path) for f in filenames]
2366 | 216 | 140 |         files = [item for item in files if not self._should_ignore(Path(item))] # 無視対象を除外
2367 | 217 | 141 |         files = sorted(files, key=lambda x: (os.path.isfile(x), x.lower())) # ディレクトリを先に、次にファイル名でソート
2368 | 218 | 142 |         files = [Path(item) for item in files] # Pathオブジェクトに変換
2369 | 219 | 143 |
2370 | 220 | 144 |         for file in files:
2371 | 221 | 145 |             contents += self._format_file_content(file)
2372 | 222 | 146 |
2373 | 223 | 147 |         return contents
2374 | 224 | 148 |
2375 | 225 | 149 |
2376 | 226 | 150 |     def write_to_file(self, tree_structure: str, file_contents: str) -> None:
2377 | 227 | 151 |         """
2378 | 228 | 152 |         生成したディレクトリ構造とファイル内容を指定されたファイルに書き込む。
2379 | 229 | 153 |
2380 | 230 | 154 |         Args:
2381 | 231 | 155 |             tree_structure (str): generate_tree_structureで生成された文字列。
2382 | 232 | 156 |             file_contents (str): generate_file_contentsで生成された文字列。
2383 | 233 | 157 |         """
2384 | 234 | 158 |         print(f"ファイル '{self.output_file}' に書き込み中...")
2385 | 235 | 159 |         try:
2386 | 236 | 160 |             # --- 出力ファイルの親ディレクトリが存在しない場合に作成 ---
2387 | 237 | 161 |             # self.output_path.parent は出力ファイルの親ディレクトリのPathオブジェクト
2388 | 238 | 162 |             # parents=True: 中間ディレクトリもまとめて作成 (例: /a/b/c.txt で a, b がなくても作る)
2389 | 239 | 163 |             # exist_ok=True: ディレクトリが既に存在していてもエラーにしない
2390 | 240 | 164 |             self.output_file.parent.mkdir(parents=True, exist_ok=True)
2391 | 241 | 165 |
2392 | 242 | 166 |             # --- ファイルへの書き込み ---
2393 | 243 | 167 |             # 'w'モード: 書き込みモード。ファイルが存在すれば上書き、なければ新規作成。
2394 | 244 | 168 |             # encoding='utf-8': UTF-8エンコーディングで書き込む。
2395 | 245 | 169 |             with open(self.output_file, 'w', encoding='utf-8') as f:
2396 | 246 | 170 |                 f.write("--- ディレクトリ構造 ---\n")
2397 | 247 | 171 |                 f.write(tree_structure)
2398 | 248 | 172 |                 f.write("\n\n--- ファイル内容 ---\n") # 構造と内容の間に区切りを入れる
2399 | 249 | 173 |                 f.write(file_contents)
2400 | 250 | 174 |
2401 | 251 | 175 |             # 成功メッセージ (絶対パスで表示すると分かりやすい)
2402 | 252 | 176 |             print(f"ディレクトリリストが '{self.output_file.resolve()}' に出力されました。")
2403 | 253 | 177 |
2404 | 254 | 178 |         except IOError as e:
2405 | 255 | 179 |             # ファイル書き込みに関するエラー (ディスクフル、アクセス権など)
2406 | 256 | 180 |             print(f"エラー: ファイル '{self.output_file}' に書き込めませんでした: {e}", file=sys.stderr)
2407 | 257 | 181 |         except Exception as e:
2408 | 258 | 182 |             # その他の予期せぬエラー
2409 | 259 | 183 |             print(f"予期せぬエラーが発生しました: {e}", file=sys.stderr)
2410 | 260 | 184 |     def run(self) -> None:
2411 | 261 | 185 |         """
2412 | 262 | 186 |         ディレクトリリスト化の全処理を実行する。
2413 | 263 | 187 |         """
2414 | 264 | 188 |         print(f"処理を開始します: {self.root_path}")
2415 | 265 | 189 |         try:
2416 | 266 | 190 |             # 1. ディレクトリ構造を生成
2417 | 267 | 191 |             tree_structure = self.generate_tree_structure()
2418 | 268 | 192 |
2419 | 269 | 193 |             # 2. ファイル内容を生成
2420 | 270 | 194 |             file_contents = self.generate_file_contents()
2421 | 271 | 195 |
2422 | 272 | 196 |             # 3. ファイルに書き込み
2423 | 273 | 197 |             self.write_to_file(tree_structure, file_contents)
2424 | 274 | 198 |
2425 | 275 | 199 |             print("処理が正常に完了しました。")
2426 | 276 | 200 |
2427 | 277 | 201 |         except Exception as e:
2428 | 278 | 202 |             # run の中で予期せぬエラーが起きた場合 (各メソッド内で捕捉されなかった場合など)
2429 | 279 | 203 |             print(f"\n処理中にエラーが発生しました: {e}", file=sys.stderr)
2430 | 280 | 204 |             # ここでプログラムを終了させるか、呼び出し元にエラーを伝えるかは設計による
2431 | 281 | 205 |             # 今回は呼び出し元 (mainブロック) で最終的なエラーハンドリングを行う想定
2432 | 282 | 206 |             raise # 捕捉したエラーを再度送出する
2433 | 283 | 207 |
2434 | 284 | 208 |
2435 | 285 | 209 | def test_should_ignore(lister: DirectoryLister) -> None:
2436 | 286 | 210 |     # テスト用のPathオブジェクトを作成 (Windows/Mac/Linuxで互換性のある書き方)
2437 | 287 | 211 |     test_path_git = Path(".git") / "config" # 相対パスで作成
2438 | 288 | 212 |     test_path_pycache = Path("my_module") / "__pycache__" / "cache_file.pyc"
2439 | 289 | 213 |     test_path_dsstore = Path("images") / ".DS_Store"
2440 | 290 | 214 |     test_path_log = Path("logs") / "app.log"
2441 | 291 | 215 |     test_path_normal_file = Path("src") / "main.py"
2442 | 292 | 216 |     test_path_normal_dir = Path("data")
2443 | 293 | 217 |     test_path_root_ignored_file = Path(".env")
2444 | 294 | 218 |     test_path_image = Path("assets") / "logo.png"
2445 | 295 | 219 |
2446 | 296 | 220 |     print("-" * 20)
2447 | 297 | 221 |     print("無視判定テスト:")
2448 | 298 | 222 |     print(f"'{test_path_git}' は無視対象? -> {lister._should_ignore(test_path_git)}") # Trueのはず
2449 | 299 | 223 |     print(f"'{test_path_pycache}' は無視対象? -> {lister._should_ignore(test_path_pycache)}") # Trueのはず
2450 | 300 | 224 |     print(f"'{test_path_dsstore}' は無視対象? -> {lister._should_ignore(test_path_dsstore)}") # Trueのはず
2451 | 301 | 225 |     print(f"'{test_path_log}' は無視対象? -> {lister._should_ignore(test_path_log)}") # Trueのはず
2452 | 302 | 226 |     print(f"'{test_path_normal_file}' は無視対象? -> {lister._should_ignore(test_path_normal_file)}") # Falseのはず
2453 | 303 | 227 |     print(f"'{test_path_normal_dir}' は無視対象? -> {lister._should_ignore(test_path_normal_dir)}") # Falseのはず
2454 | 304 | 228 |     print(f"'{test_path_root_ignored_file}' は無視対象? -> {lister._should_ignore(test_path_root_ignored_file)}") # Trueのはず
2455 | 305 | 229 |     print(f"'{test_path_image}' は無視対象? -> {lister._should_ignore(test_path_image)}") # Trueのはず
2456 | 306 | 230 |     print("-" * 20)
2457 | 307 | 231 |
2458 | 308 | 232 |
2459 | 309 | 233 | def test_get_sorted_items() -> None:
2460 | 310 | 234 |     # テスト用のディレクトリとファイルを作成
2461 | 311 | 235 |     test_base_dir = Path("./temp_lister_test")
2462 | 312 | 236 |     test_base_dir.mkdir(exist_ok=True)
2463 | 313 | 237 |     (test_base_dir / "dir_a").mkdir(exist_ok=True)
2464 | 314 | 238 |     (test_base_dir / "file_z.txt").touch(exist_ok=True)
2465 | 315 | 239 |     (test_base_dir / "File_B.py").touch(exist_ok=True)
2466 | 316 | 240 |     (test_base_dir / "dir_c").mkdir(exist_ok=True)
2467 | 317 | 241 |     (test_base_dir / ".env").touch(exist_ok=True) # 無視されるファイル
2468 | 318 | 242 |     (test_base_dir / "image.png").touch(exist_ok=True) # 無視される拡張子
2469 | 319 | 243 |     (test_base_dir / ".git").mkdir(exist_ok=True) # 無視されるディレクトリ
2470 | 320 | 244 |
2471 | 321 | 245 |     # Listerインスタンスを作成 (テストディレクトリを対象)
2472 | 322 | 246 |     lister = DirectoryLister(
2473 | 323 | 247 |         Path(test_base_dir),
2474 | 324 | 248 |         Path("./output.txt"),
2475 | 325 | 249 |         config=get_config(Path('./settings.yml'))
2476 | 326 | 250 |     )
2477 | 327 | 251 |
2478 | 328 | 252 |     print(f"\n'{test_base_dir}' 内のソート済みアイテム:")
2479 | 329 | 253 |     sorted_items = lister._get_sorted_items(test_base_dir)
2480 | 330 | 254 |     if not sorted_items:
2481 | 331 | 255 |         print("  (アイテムが見つからないか、アクセスエラー)")
2482 | 332 | 256 |     for item in sorted_items:
2483 | 333 | 257 |         item_type = "Dir " if item.is_dir() else "File"
2484 | 334 | 258 |         print(f"  {item_type}: {item.name}")
2485 | 335 | 259 |
2486 | 336 | 260 |     # 期待される出力順序の確認 (手動)
2487 | 337 | 261 |     # dir_a, dir_c, File_B.py, file_z.txt の順になるはず
2488 | 338 | 262 |
2489 | 339 | 263 |
2490 | 340 | 264 | def main() -> None:
2491 | 341 | 265 |     # インスタンス化
2492 | 342 | 266 |     lister = DirectoryLister(
2493 | 343 | 267 |         directory_path=Path('./'),
2494 | 344 | 268 |         output_file=Path('text.txt'),
2495 | 345 | 269 |         config=get_config(Path('./settings.yml'))
2496 | 346 | 270 |     )
2497 | 347 | 271 |
2498 | 348 | 272 |     structure = lister.generate_tree_structure()
2499 | 349 | 273 |     print("-"*30)
2500 | 350 | 274 |     print(structure)
2501 | 351 | 275 |
2502 | 352 | 276 |     # ディレクトリリスト化を実行
2503 | 353 | 277 |     lister.run()
2504 | 354 | 278 |
2505 | 355 | 279 |     # for item in a:
2506 | 356 | 280 |     #     print(item)
2507 | 357 | 281 |
2508 | 358 | 282 |     # test_should_ignore(lister)
2509 | 359 | 283 |     # test_get_sorted_items()
2510 | 360 | 284 |
2511 | 361 | 285 |
2512 | 362 | 286 | if __name__ == "__main__":
2513 | 363 | 287 |     main()
2514 | 364 | --------------------------------------------------------------------------------
2515 | 365 |
2516 | 366 |
2517 | 367 | /entrypoint.py:
2518 | 368 | --------------------------------------------------------------------------------
2519 | 369 |   1 | from pathlib import Path
2520 | 370 |   2 |
2521 | 371 |   3 | from config import get_config, Config
2522 | 372 |   4 |
2523 | 373 |   5 | # 無視するディレクトリやファイル、拡張子の設定を取得
2524 | 374 |   6 | settings_yaml_path = Path('./settings.yml')
2525 | 375 |   7 | CONFIG = get_config(settings_yaml_path)
2526 | 376 |   8 |
2527 | 377 |   9 |
2528 | 378 |  10 | def should_ignore(path: Path, config: Config=CONFIG) -> bool:
2529 | 379 |  11 |     """指定されたパスが無視対象かどうかを判定する"""
2530 | 380 |  12 |     # ディレクトリ名で無視
2531 | 381 |  13 |
2532 | 382 |  14 |     if any(part in getattr(config, "ignore_dirs") for part in path.parts):
2533 | 383 |  15 |         return True
2534 | 384 |  16 |     # ファイル名で無視
2535 | 385 |  17 |     if path.name in getattr(config, "ignore_files"):
2536 | 386 |  18 |         return True
2537 | 387 |  19 |     # 拡張子で無視
2538 | 388 |  20 |     if path.suffix.lower() in config.ignore_extensions.all_extensions():
2539 | 389 |  21 |         return True
2540 | 390 |  22 |     return False
2541 | 391 |  23 |
2542 | 392 |  24 |
2543 | 393 |  25 | def generate_tree(start_path: Path, prefix: str = '', is_last: bool = True) -> str:
2544 | 394 |  26 |     """ディレクトリ構造をtree形式で生成する再帰関数"""
2545 | 395 |  27 |     structure = ""
2546 | 396 |  28 |     # 無視対象のディレクトリ/ファイルは処理しない
2547 | 397 |  29 |     if should_ignore(start_path):
2548 | 398 |  30 |         return ""
2549 | 399 |  31 |
2550 | 400 |  32 |     connector = '└── ' if is_last else '├── '
2551 | 401 |  33 |     structure += f"{prefix}{connector}{start_path.name}\n"
2552 | 402 |  34 |
2553 | 403 |  35 |     if start_path.is_dir():
2554 | 404 |  36 |         new_prefix = prefix + ('    ' if is_last else '│   ')
2555 | 405 |  37 |         # ディレクトリ内のアイテムを取得し、無視対象を除外してソート
2556 | 406 |  38 |         items = sorted(
2557 | 407 |  39 |             [item for item in start_path.iterdir() if not should_ignore(item)],
2558 | 408 |  40 |             key=lambda x: (x.is_file(), x.name.lower()) # ディレクトリを先に、次にファイル名でソート
2559 | 409 |  41 |         )
2560 | 410 |  42 |         for i, item in enumerate(items):
2561 | 411 |  43 |             is_last_item = (i == len(items) - 1)
2562 | 412 |  44 |             structure += generate_tree(item, new_prefix, is_last_item)
2563 | 413 |  45 |
2564 | 414 |  46 |     return structure
2565 | 415 |  47 |
2566 | 416 |  48 |
2567 | 417 |  49 | def get_file_contents(root_path: Path) -> str:
2568 | 418 |  50 |     """指定されたディレクトリ以下の全ファイルのパスと内容を行番号付きで取得する"""
2569 | 419 |  51 |     contents = ""
2570 | 420 |  52 |     separator = "-" * 80 + "\n"
2571 | 421 |  53 |     processed_files_count = 0
2572 | 422 |  54 |
2573 | 423 |  55 |     # rglob で再帰的にファイルを取得し、パスでソート
2574 | 424 |  56 |     all_paths = sorted([p for p in root_path.rglob('*')])
2575 | 425 |  57 |
2576 | 426 |  58 |     for item in all_paths:
2577 | 427 |  59 |         # 無視対象をスキップ
2578 | 428 |  60 |         if should_ignore(item):
2579 | 429 |  61 |             continue
2580 | 430 |  62 |
2581 | 431 |  63 |         if item.is_file():
2582 | 432 |  64 |             processed_files_count += 1
2583 | 433 |  65 |             # ルートパスからの相対パスを取得し、先頭に / を追加
2584 | 434 |  66 |             try:
2585 | 435 |  67 |                 relative_path = item.relative_to(root_path)
2586 | 436 |  68 |                 contents += f"\n/{relative_path}:\n"
2587 | 437 |  69 |             except ValueError:
2588 | 438 |  70 |                 # root_path自身がファイルの場合など
2589 | 439 |  71 |                 contents += f"\n/{item.name}:\n"
2590 | 440 |  72 |
2591 | 441 |  73 |             contents += separator
2592 | 442 |  74 |             try:
2593 | 443 |  75 |                 # さまざまなエンコーディングに対応し、エラーは無視
2594 | 444 |  76 |                 with open(item, 'r', encoding='utf-8', errors='ignore') as f:
2595 | 445 |  77 |                     lines = f.readlines()
2596 | 446 |  78 |                     if not lines:
2597 | 447 |  79 |                         contents += " [空ファイル]\n"
2598 | 448 |  80 |                     else:
2599 | 449 |  81 |                         # 行番号の桁数を計算
2600 | 450 |  82 |                         max_digits = len(str(len(lines)))
2601 | 451 |  83 |                         for i, line in enumerate(lines):
2602 | 452 |  84 |                             # 行番号を右寄せでフォーマット
2603 | 453 |  85 |                             line_num_str = str(i + 1).rjust(max_digits)
2604 | 454 |  86 |                             # 末尾の改行は維持しつつ、余分な空白は削除
2605 | 455 |  87 |                             contents += f"{line_num_str} | {line.rstrip()}\n"
2606 | 456 |  88 |             except Exception as e:
2607 | 457 |  89 |                 contents += f" [エラー] ファイル読み込み中にエラーが発生しました: {e}\n"
2608 | 458 |  90 |             contents += separator
2609 | 459 |  91 |
2610 | 460 |  92 |     if processed_files_count == 0:
2611 | 461 |  93 |         contents += "\n[指定されたディレクトリ内に処理対象ファイルが見つかりませんでした]\n"
2612 | 462 |  94 |
2613 | 463 |  95 |     return contents
2614 | 464 |  96 |
2615 | 465 |  97 | def generate_directory_listing(directory_path: str, output_file: str) -> None:
2616 | 466 |  98 |     """ディレクトリ構造とファイル内容を指定ファイルに出力する"""
2617 | 467 |  99 |     start_path = Path(directory_path).resolve() # 絶対パスに変換
2618 | 468 | 100 |     if not start_path.is_dir():
2619 | 469 | 101 |         print(f"エラー: '{directory_path}' は有効なディレクトリではありません。")
2620 | 470 | 102 |         return
2621 | 471 | 103 |
2622 | 472 | 104 |     print(f"処理を開始します: {start_path}")
2623 | 473 | 105 |     print(f"出力ファイル: {output_file}")
2624 | 474 | 106 |
2625 | 475 | 107 |     # ディレクトリ構造の取得 (tree形式)
2626 | 476 | 108 |     print("ディレクトリ構造を生成中...")
2627 | 477 | 109 |     # ルートディレクトリ自体も表示するために少し調整
2628 | 478 | 110 |     structure = f"{start_path.name}\n"
2629 | 479 | 111 |     items = sorted(
2630 | 480 | 112 |         [item for item in start_path.iterdir() if not should_ignore(item)],
2631 | 481 | 113 |          key=lambda x: (x.is_file(), x.name.lower())
2632 | 482 | 114 |     )
2633 | 483 | 115 |     for i, item in enumerate(items):
2634 | 484 | 116 |         is_last_item = (i == len(items) - 1)
2635 | 485 | 117 |         structure += generate_tree(item, '', is_last_item)
2636 | 486 | 118 |     print("ディレクトリ構造の生成完了。")
2637 | 487 | 119 |
2638 | 488 | 120 |     # ファイル内容の取得
2639 | 489 | 121 |     print("ファイル内容を取得中...")
2640 | 490 | 122 |     file_contents_data = get_file_contents(start_path)
2641 | 491 | 123 |     print("ファイル内容の取得完了。")
2642 | 492 | 124 |
2643 | 493 | 125 |     # ファイルへの書き込み
2644 | 494 | 126 |     print("ファイルに書き込み中...")
2645 | 495 | 127 |     try:
2646 | 496 | 128 |         # 出力ファイルのディレクトリが存在しない場合は作成
2647 | 497 | 129 |         output_path = Path(output_file)
2648 | 498 | 130 |         output_path.parent.mkdir(parents=True, exist_ok=True)
2649 | 499 | 131 |
2650 | 500 | 132 |         with open(output_path, 'w', encoding='utf-8') as f:
2651 | 501 | 133 |             f.write(structure)
2652 | 502 | 134 |             f.write("\n\n") # treeと内容の間に空行を入れる
2653 | 503 | 135 |             f.write(file_contents_data)
2654 | 504 | 136 |         print(f"ディレクトリリストが '{output_path.resolve()}' に出力されました。")
2655 | 505 | 137 |     except IOError as e:
2656 | 506 | 138 |         print(f"エラー: ファイル '{output_file}' に書き込めませんでした: {e}")
2657 | 507 | 139 |     except Exception as e:
2658 | 508 | 140 |         print(f"予期せぬエラーが発生しました: {e}")
2659 | 509 | 141 |
2660 | 510 | 142 |
2661 | 511 | 143 | def main() -> None:
2662 | 512 | 144 |     directory_path = "../"
2663 | 513 | 145 |     start_path = Path(directory_path).resolve() # 絶対パスに変換
2664 | 514 | 146 |     start_path = Path(directory_path).resolve().resolve() # 絶対パスに変換
2665 | 515 | 147 |
2666 | 516 | 148 |     generate_directory_listing(directory_path, "./entrypoint.txt")
2667 | 517 | 149 |
2668 | 518 | 150 |
2669 | 519 | 151 | # --- コマンドライン引数の処理とメイン実行部分 ---
2670 | 520 | 152 | if __name__ == "__main__":
2671 | 521 | 153 |     main()
2672 | 522 | --------------------------------------------------------------------------------
2673 | 523 |
2674 | 524 |
2675 | 525 | /pyproject.toml:
2676 | 526 | --------------------------------------------------------------------------------
2677 | 527 |  1 | [project]
2678 | 528 |  2 | name = "repository-reader"
2679 | 529 |  3 | version = "0.1.0"
2680 | 530 |  4 | description = ""
2681 | 531 |  5 | authors = [
2682 | 532 |  6 |     {name = "Your Name",email = "you@example.com"}
2683 | 533 |  7 | ]
2684 | 534 |  8 | readme = "README.md"
2685 | 535 |  9 | requires-python = ">=3.11"
2686 | 536 | 10 | dependencies = [
2687 | 537 | 11 |     "pyyaml (>=6.0.2,<7.0.0)",
2688 | 538 | 12 |     "pydantic (>=2.11.3,<3.0.0)"
2689 | 539 | 13 | ]
2690 | 540 | 14 |
2691 | 541 | 15 |
2692 | 542 | 16 | [build-system]
2693 | 543 | 17 | requires = ["poetry-core>=2.0.0,<3.0.0"]
2694 | 544 | 18 | build-backend = "poetry.core.masonry.api"
2695 | 545 | --------------------------------------------------------------------------------
2696 | 546 |
2697 | 547 |
2698 | 548 | /settings.yml:
2699 | 549 | --------------------------------------------------------------------------------
2700 | 550 |  1 | ignore_dirs:
2701 | 551 |  2 |   - ".git"
2702 | 552 |  3 |   - "__pycache__"
2703 | 553 |  4 |   - ".venv"
2704 | 554 |  5 |   - "node_modules"
2705 | 555 |  6 |   - ".vscode"
2706 | 556 |  7 |   - ".idea"
2707 | 557 |  8 |   - "build"
2708 | 558 |  9 |   - "dist"
2709 | 559 | 10 |   - "*.egg_info"
2710 | 560 | 11 |   - ".mypy_cache"
2711 | 561 | 12 | ignore_files:
2712 | 562 | 13 |   - ".DS_Store"
2713 | 563 | 14 |   - ".env"
2714 | 564 | 15 |   - "thumbs.db"
2715 | 565 | 16 | ignore_extensions:
2716 | 566 | 17 |   images:
2717 | 567 | 18 |     - '.png'
2718 | 568 | 19 |     - '.jpg'
2719 | 569 | 20 |     - '.jpeg'
2720 | 570 | 21 |     - '.gif'
2721 | 571 | 22 |     - '.bmp'
2722 | 572 | 23 |     - '.tiff'
2723 | 573 | 24 |     - '.webp'
2724 | 574 | 25 |     - '.svg'
2725 | 575 | 26 |     - '.ico'
2726 | 576 | 27 |   videos:
2727 | 577 | 28 |     - '.mp4'
2728 | 578 | 29 |     - '.mov'
2729 | 579 | 30 |     - '.avi'
2730 | 580 | 31 |     - '.wmv'
2731 | 581 | 32 |     - '.mp3'
2732 | 582 | 33 |     - '.wav'
2733 | 583 | 34 |     - '.ogg'
2734 | 584 | 35 |   compressed:
2735 | 585 | 36 |     - '.zip'
2736 | 586 | 37 |     - '.gz'
2737 | 587 | 38 |     - '.tar'
2738 | 588 | 39 |     - '.rar'
2739 | 589 | 40 |     - '.7z'
2740 | 590 | 41 |   binaries:
2741 | 591 | 42 |     - '.pyc'
2742 | 592 | 43 |     - '.pyo'
2743 | 593 | 44 |     - '.exe'
2744 | 594 | 45 |     - '.dll'
2745 | 595 | 46 |     - '.so'
2746 | 596 | 47 |     - '.o'
2747 | 597 | 48 |     - '.a'
2748 | 598 | 49 |     - '.lib'
2749 | 599 | 50 |   documents:
2750 | 600 | 51 |     - '.pdf'
2751 | 601 | 52 |     - '.doc'
2752 | 602 | 53 |     - '.docx'
2753 | 603 | 54 |     - '.xls'
2754 | 604 | 55 |     - '.xlsx'
2755 | 605 | 56 |     - '.ppt'
2756 | 606 | 57 |     - '.pptx'
2757 | 607 | 58 |   others:
2758 | 608 | 59 |     - '.lock'
2759 | 609 | 60 |     - '.log'
2760 | 610 | 61 |     - '.sqlite'
2761 | 611 | 62 |     - '.db'
2762 | 612 | 63 |
2763 | 613 | --------------------------------------------------------------------------------
2764 | 614 |
2765 | 615 |
2766 | 616 | /temp_lister_test/File_B.py:
2767 | 617 | --------------------------------------------------------------------------------
2768 | 618 |  [空ファイル]
2769 | 619 | --------------------------------------------------------------------------------
2770 | 620 |
2771 | 621 |
2772 | 622 | /temp_lister_test/file_z.txt:
2773 | 623 | --------------------------------------------------------------------------------
2774 | 624 |  [空ファイル]
2775 | 625 | --------------------------------------------------------------------------------
2776 | --------------------------------------------------------------------------------
2777 | 
2778 | /project_module/src/project_module/__init__.py:
2779 | --------------------------------------------------------------------------------
2780 |  [空ファイル]
2781 | --------------------------------------------------------------------------------
--------------------------------------------------------------------------------


/pyproject.toml:
--------------------------------------------------------------------------------
 1 | [project]
 2 | name = "repository-reader"
 3 | version = "0.1.0"
 4 | description = ""
 5 | authors = [
 6 |     {name = "Your Name",email = "you@example.com"}
 7 | ]
 8 | readme = "README.md"
 9 | requires-python = ">=3.11"
10 | dependencies = [
11 |     "pyyaml (>=6.0.2,<7.0.0)",
12 |     "pydantic (>=2.11.3,<3.0.0)"
13 | ]
14 | 
15 | 
16 | [build-system]
17 | requires = ["poetry-core>=2.0.0,<3.0.0"]
18 | build-backend = "poetry.core.masonry.api"
--------------------------------------------------------------------------------


/settings.yml:
--------------------------------------------------------------------------------
 1 | ignore_dirs:
 2 |   - ".git"
 3 |   - "__pycache__"
 4 |   - ".venv"
 5 |   - "node_modules"
 6 |   - ".vscode"
 7 |   - ".idea"
 8 |   - "build"
 9 |   - "dist"
10 |   - "*.egg_info"
11 |   - ".mypy_cache"
12 | ignore_files:
13 |   - ".DS_Store"
14 |   - ".env"
15 |   - "thumbs.db"
16 | ignore_extensions:
17 |   images:
18 |     - '.png'
19 |     - '.jpg'
20 |     - '.jpeg'
21 |     - '.gif'
22 |     - '.bmp'
23 |     - '.tiff'
24 |     - '.webp'
25 |     - '.svg'
26 |     - '.ico'
27 |   videos:
28 |     - '.mp4'
29 |     - '.mov'
30 |     - '.avi'
31 |     - '.wmv'
32 |     - '.mp3'
33 |     - '.wav'
34 |     - '.ogg'
35 |   compressed:
36 |     - '.zip'
37 |     - '.gz'
38 |     - '.tar'
39 |     - '.rar'
40 |     - '.7z'
41 |   binaries:
42 |     - '.pyc'
43 |     - '.pyo'
44 |     - '.exe'
45 |     - '.dll'
46 |     - '.so'
47 |     - '.o'
48 |     - '.a'
49 |     - '.lib'
50 |   documents:
51 |     - '.pdf'
52 |     - '.doc'
53 |     - '.docx'
54 |     - '.xls'
55 |     - '.xlsx'
56 |     - '.ppt'
57 |     - '.pptx'
58 |   others:
59 |     - '.lock'
60 |     - '.log'
61 |     - '.sqlite'
62 |     - '.db'
63 | 
--------------------------------------------------------------------------------


/temp_lister_test/File_B.py:
--------------------------------------------------------------------------------
 [空ファイル]
--------------------------------------------------------------------------------


/temp_lister_test/file_z.txt:
--------------------------------------------------------------------------------
 [空ファイル]
--------------------------------------------------------------------------------
